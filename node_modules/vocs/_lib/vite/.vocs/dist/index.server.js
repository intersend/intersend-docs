import * as runtime from "react/jsx-runtime";
import { jsx, jsxs, Fragment as Fragment$1 } from "react/jsx-runtime";
import { Link as Link$2, useLocation, useNavigate, useMatch, matchPath, ScrollRestoration, StaticRouter, Routes, Route, createStaticHandler, createStaticRouter, StaticRouterProvider } from "react-router";
import { existsSync, readFileSync } from "node:fs";
import { resolve } from "node:path";
import toml from "toml";
import { loadConfigFromFile } from "vite";
import React, { createContext, useContext, useState, useEffect, forwardRef, useMemo, Fragment, useCallback, useRef, cloneElement } from "react";
import clsx$1, { clsx } from "clsx";
import { assignInlineVars } from "@vanilla-extract/dynamic";
import { useInView } from "react-intersection-observer";
import { runSync } from "@mdx-js/mdx";
import { Cross1Icon, ArrowLeftIcon, MagnifyingGlassIcon, ListBulletIcon, FileIcon, ChevronRightIcon, Pencil2Icon } from "@radix-ui/react-icons";
import * as Dialog from "@radix-ui/react-dialog";
import MiniSearch from "minisearch";
import * as Label from "@radix-ui/react-label";
import Mark from "mark.js";
import * as NavigationMenu from "@radix-ui/react-navigation-menu";
import * as Accordion from "@radix-ui/react-accordion";
import * as Popover_ from "@radix-ui/react-popover";
import { MDXProvider } from "@mdx-js/react";
import * as Tabs from "@radix-ui/react-tabs";
import { useFloating, arrow, offset, shift, useHover, safePolygon, useInteractions, FloatingArrow } from "@floating-ui/react";
async function defineConfig({ blogDir = "./pages/blog", head, ogImageUrl, rootDir = "docs", title: title2 = "Docs", titleTemplate = `%s – ${title2}`, ...config2 }) {
  const basePath = parseBasePath(config2.basePath);
  return {
    blogDir,
    head,
    ogImageUrl,
    rootDir,
    title: title2,
    titleTemplate,
    ...config2,
    basePath,
    banner: await parseBanner(config2.banner ?? ""),
    font: parseFont(config2.font ?? {}),
    iconUrl: parseImageUrl(config2.iconUrl, {
      basePath
    }),
    logoUrl: parseImageUrl(config2.logoUrl, {
      basePath
    }),
    markdown: parseMarkdown(config2.markdown ?? {}),
    socials: parseSocials(config2.socials ?? []),
    topNav: parseTopNav(config2.topNav ?? []),
    theme: await parseTheme(config2.theme ?? {}),
    vite: parseViteConfig(config2.vite, {
      basePath
    })
  };
}
const getDefaultConfig = async () => await defineConfig({});
function parseBasePath(basePath_) {
  let basePath = basePath_;
  if (!basePath)
    return "";
  if (!basePath.startsWith("/"))
    basePath = `/${basePath}`;
  if (basePath.endsWith("/"))
    basePath = basePath.slice(0, -1);
  return basePath;
}
async function parseBanner(banner) {
  if (!banner)
    return void 0;
  const bannerContent = (() => {
    if (typeof banner === "string")
      return banner;
    if (typeof banner === "object" && "content" in banner)
      return banner.content;
    return void 0;
  })();
  const content2 = await (async () => {
    if (typeof bannerContent !== "string")
      return bannerContent;
    const { compile } = await import("@mdx-js/mdx");
    const remarkGfm = (await import("remark-gfm")).default;
    return String(await compile(bannerContent, {
      outputFormat: "function-body",
      remarkPlugins: [remarkGfm]
    }));
  })();
  if (!content2)
    return void 0;
  const textColor = await (async () => {
    if (typeof banner === "string")
      return void 0;
    if (typeof banner === "object") {
      if ("textColor" in banner)
        return banner.textColor;
      if ("backgroundColor" in banner && banner.backgroundColor) {
        const chroma = (await import("chroma-js")).default;
        return chroma.contrast(banner.backgroundColor, "white") < 4.5 ? "black" : "white";
      }
    }
    return void 0;
  })();
  return {
    height: "32px",
    ...typeof banner === "object" ? banner : {},
    content: content2,
    textColor
  };
}
function parseFont(font) {
  if ("google" in font)
    return { default: font };
  return font;
}
function parseImageUrl(imageUrl, { basePath }) {
  if (!imageUrl)
    return;
  if (process.env.NODE_ENV === "development")
    return imageUrl;
  if (typeof imageUrl === "string") {
    if (imageUrl.startsWith("http"))
      return imageUrl;
    return `${basePath}${imageUrl}`;
  }
  return {
    dark: imageUrl.dark.startsWith("http") ? imageUrl.dark : `${basePath}${imageUrl.dark}`,
    light: imageUrl.light.startsWith("http") ? imageUrl.light : `${basePath}${imageUrl.light}`
  };
}
function parseMarkdown(markdown) {
  return {
    ...markdown,
    code: {
      themes: {
        dark: "github-dark-dimmed",
        light: "github-light"
      },
      ...markdown.code
    }
  };
}
const socialsMeta = {
  discord: { label: "Discord", type: "discord" },
  github: { label: "GitHub", type: "github" },
  telegram: { label: "Telegram", type: "telegram" },
  warpcast: { label: "Warpcast", type: "warpcast" },
  x: { label: "X (Twitter)", type: "x" }
};
function parseSocials(socials) {
  return socials.map((social) => {
    return {
      icon: social.icon,
      link: social.link,
      ...socialsMeta[social.icon]
    };
  });
}
let id = 0;
function parseTopNav(topNav) {
  const parsedTopNav = [];
  for (const item2 of topNav) {
    parsedTopNav.push({
      ...item2,
      id: id++,
      items: item2.items ? parseTopNav(item2.items) : []
    });
  }
  return parsedTopNav;
}
async function parseTheme(theme) {
  const chroma = (await import("chroma-js")).default;
  const accentColor = (() => {
    if (!theme.accentColor)
      return theme.accentColor;
    if (typeof theme.accentColor === "object" && !Object.keys(theme.accentColor).includes("light") && !Object.keys(theme.accentColor).includes("dark"))
      return theme.accentColor;
    const accentColor2 = theme.accentColor;
    const accentColorLight = typeof accentColor2 === "object" ? accentColor2.light : accentColor2;
    const accentColorDark = typeof accentColor2 === "object" ? accentColor2.dark : accentColor2;
    return {
      backgroundAccent: {
        dark: accentColorDark,
        light: accentColorLight
      },
      backgroundAccentHover: {
        dark: chroma(accentColorDark).darken(0.25).hex(),
        light: chroma(accentColorLight).darken(0.25).hex()
      },
      backgroundAccentText: {
        dark: chroma.contrast(accentColorDark, "white") < 4.5 ? "black" : "white",
        light: chroma.contrast(accentColorLight, "white") < 4.5 ? "black" : "white"
      },
      borderAccent: {
        dark: chroma(accentColorDark).brighten(0.5).hex(),
        light: chroma(accentColorLight).darken(0.25).hex()
      },
      textAccent: {
        dark: accentColorDark,
        light: accentColorLight
      },
      textAccentHover: {
        dark: chroma(accentColorDark).darken(0.5).hex(),
        light: chroma(accentColorLight).darken(0.5).hex()
      }
    };
  })();
  return {
    ...theme,
    accentColor
  };
}
function parseViteConfig(viteConfig, { basePath }) {
  return {
    ...viteConfig,
    ...basePath ? { base: basePath } : {}
  };
}
const moduleExtensions = ["js", "jsx", "ts", "tsx", "mjs", "mts"];
const staticExtensions = ["toml", "json"];
const extensions = [...moduleExtensions, ...staticExtensions];
const defaultConfigPaths = [".vocs/config", "vocs.config", "Vocs"];
async function resolveVocsConfig(parameters = {}) {
  const { command = "serve", mode = "development" } = parameters;
  const [configPath, ext] = (() => {
    for (const ext2 of extensions) {
      if (parameters.configPath)
        return parameters.configPath;
      for (const filePath of defaultConfigPaths)
        if (existsSync(resolve(process.cwd(), `${filePath}.${ext2}`)))
          return [`${filePath}.${ext2}`, ext2];
    }
    return [void 0, void 0];
  })();
  const result2 = await (async () => {
    if (!ext)
      return;
    if (moduleExtensions.includes(ext))
      return await loadConfigFromFile({ command, mode }, configPath);
    if (staticExtensions.includes(ext)) {
      const file = readFileSync(configPath, "utf8");
      const rawConfig = (() => {
        if (ext === "toml")
          return camelCaseKeys(toml.parse(file));
        if (ext === "json")
          return JSON.parse(file);
        return;
      })();
      const config3 = await defineConfig(rawConfig);
      return config3 ? { config: config3 } : void 0;
    }
    return;
  })();
  const config2 = result2 ? result2.config : await getDefaultConfig();
  return {
    config: config2,
    configPath
  };
}
function camelCaseKeys(obj) {
  if (typeof obj !== "object")
    return obj;
  if (Array.isArray(obj))
    return obj.map(camelCaseKeys);
  return Object.fromEntries(Object.entries(obj).map(([key, value]) => [
    key.replace(/[-_](.)/g, (_, c) => c.toUpperCase()),
    camelCaseKeys(value)
  ]));
}
function deserializeFunctions(value) {
  if (Array.isArray(value)) {
    return value.map(deserializeFunctions);
  } else if (typeof value === "object" && value !== null) {
    return Object.keys(value).reduce((acc, key) => {
      acc[key] = deserializeFunctions(value[key]);
      return acc;
    }, {});
  } else if (typeof value === "string" && value.includes("_vocs-fn_")) {
    return new Function(`return ${value.slice(9)}`)();
  } else {
    return value;
  }
}
const config = deserializeFunctions({ "blogDir": "./pages/blog", "rootDir": "docs", "title": "Intersend", "titleTemplate": "%s – Intersend", "description": "Documentation for Intersend project", "logoUrl": { "dark": "/images/Logo_black_version.svg", "light": "/images/Logo_white_version.svg" }, "sidebar": [{ "text": "Introduction", "link": "/" }, { "text": "Overview", "link": "/overview" }, { "text": "Apps - Get Listed", "collapsed": false, "items": [{ "text": "Overview", "link": "/apps/overview" }, { "text": "Safe Integration", "link": "/apps/safe" }, { "text": "Privy Integration", "link": "/apps/privy" }, { "text": "Dynamic Integration", "link": "/apps/dynamic" }] }, { "text": "Wallets - Add Apps", "collapsed": false, "items": [{ "text": "Overview", "link": "/waas/overview-waas" }, { "text": "Quickstart", "link": "/waas/quickstart-waas" }] }, { "text": "Auth - Make Apps Portable", "collapsed": false, "items": [{ "text": "Overview", "link": "/auth-providers/overview-auth" }, { "text": "Integration", "link": "/auth-providers/integration-auth" }] }], "theme": { "accentColor": { "backgroundAccent": { "dark": "#3B82F6", "light": "#3B82F6" }, "backgroundAccentHover": { "dark": "#2477e9", "light": "#2477e9" }, "backgroundAccentText": { "dark": "black", "light": "black" }, "borderAccent": { "dark": "#5e99ff", "light": "#2477e9" }, "textAccent": { "dark": "#3B82F6", "light": "#3B82F6" }, "textAccentHover": { "dark": "#006cdc", "light": "#006cdc" } } }, "topNav": [{ "text": "Support", "link": "mailto:hello@intersend.io", "id": 110, "items": [] }, { "text": "Dashboard →", "link": "https://app.intersend.io", "id": 111, "items": [] }], "basePath": "", "font": {}, "markdown": { "code": { "themes": { "dark": "github-dark-dimmed", "light": "github-light" } } }, "socials": [], "vite": {} });
const ConfigContext = createContext(config);
function getConfig() {
  return config;
}
function ConfigProvider({ children, config: initialConfig }) {
  const [config2, setConfig] = useState(() => {
    if (initialConfig)
      return initialConfig;
    return getConfig();
  });
  useEffect(() => {
  }, []);
  useEffect(() => {
  }, [config2]);
  return jsx(ConfigContext.Provider, { value: config2, children });
}
function useConfig() {
  return useContext(ConfigContext);
}
const routes$1 = [{ lazy: () => import("./assets/development-LtPOy6D_.js"), path: "/development", type: "mdx", filePath: "development.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/development-LtPOy6D_.js"), path: "/development.html", type: "mdx", filePath: "development.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/index-D5wgiEDA.js"), path: "/", type: "mdx", filePath: "index.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/introduction-D5wgiEDA.js"), path: "/introduction", type: "mdx", filePath: "introduction.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/introduction-D5wgiEDA.js"), path: "/introduction.html", type: "mdx", filePath: "introduction.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/overview-BTAqsPEG.js"), path: "/overview", type: "mdx", filePath: "overview.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/overview-BTAqsPEG.js"), path: "/overview.html", type: "mdx", filePath: "overview.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/quickstart_technical-BcmJBVYw.js"), path: "/quickstart_technical", type: "mdx", filePath: "quickstart_technical.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/quickstart_technical-BcmJBVYw.js"), path: "/quickstart_technical.html", type: "mdx", filePath: "quickstart_technical.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/rainbowkit-BuE410dd.js"), path: "/rainbowkit", type: "mdx", filePath: "rainbowkit.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/rainbowkit-BuE410dd.js"), path: "/rainbowkit.html", type: "mdx", filePath: "rainbowkit.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/walletconnect-B0NWUYgm.js"), path: "/walletconnect", type: "mdx", filePath: "walletconnect.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/walletconnect-B0NWUYgm.js"), path: "/walletconnect.html", type: "mdx", filePath: "walletconnect.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/introduction-DCNXkG2M.js"), path: "/api-reference/introduction", type: "mdx", filePath: "api-reference/introduction.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/introduction-DCNXkG2M.js"), path: "/api-reference/introduction.html", type: "mdx", filePath: "api-reference/introduction.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/dynamic-DbYBwsF2.js"), path: "/apps/dynamic", type: "mdx", filePath: "apps/dynamic.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/dynamic-DbYBwsF2.js"), path: "/apps/dynamic.html", type: "mdx", filePath: "apps/dynamic.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/magic-D1T5RD3E.js"), path: "/apps/magic", type: "mdx", filePath: "apps/magic.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/magic-D1T5RD3E.js"), path: "/apps/magic.html", type: "mdx", filePath: "apps/magic.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/overview-DZqLdrGL.js"), path: "/apps/overview", type: "mdx", filePath: "apps/overview.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/overview-DZqLdrGL.js"), path: "/apps/overview.html", type: "mdx", filePath: "apps/overview.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/privy-BZ0sEZao.js"), path: "/apps/privy", type: "mdx", filePath: "apps/privy.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/privy-BZ0sEZao.js"), path: "/apps/privy.html", type: "mdx", filePath: "apps/privy.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/safe-B92rOaP9.js"), path: "/apps/safe", type: "mdx", filePath: "apps/safe.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/safe-B92rOaP9.js"), path: "/apps/safe.html", type: "mdx", filePath: "apps/safe.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/integration-auth-ChW2ZzYN.js"), path: "/auth-providers/integration-auth", type: "mdx", filePath: "auth-providers/integration-auth.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/integration-auth-ChW2ZzYN.js"), path: "/auth-providers/integration-auth.html", type: "mdx", filePath: "auth-providers/integration-auth.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/overview-auth-C4iTPMDb.js"), path: "/auth-providers/overview-auth", type: "mdx", filePath: "auth-providers/overview-auth.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/overview-auth-C4iTPMDb.js"), path: "/auth-providers/overview-auth.html", type: "mdx", filePath: "auth-providers/overview-auth.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/code-Bo7kSr-h.js"), path: "/essentials/code", type: "mdx", filePath: "essentials/code.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/code-Bo7kSr-h.js"), path: "/essentials/code.html", type: "mdx", filePath: "essentials/code.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/images-DCf5f0NE.js"), path: "/essentials/images", type: "mdx", filePath: "essentials/images.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/images-DCf5f0NE.js"), path: "/essentials/images.html", type: "mdx", filePath: "essentials/images.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/markdown-DEJq8eJW.js"), path: "/essentials/markdown", type: "mdx", filePath: "essentials/markdown.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/markdown-DEJq8eJW.js"), path: "/essentials/markdown.html", type: "mdx", filePath: "essentials/markdown.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/navigation-a8894lUJ.js"), path: "/essentials/navigation", type: "mdx", filePath: "essentials/navigation.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/navigation-a8894lUJ.js"), path: "/essentials/navigation.html", type: "mdx", filePath: "essentials/navigation.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/reusable-snippets-DGwUAtke.js"), path: "/essentials/reusable-snippets", type: "mdx", filePath: "essentials/reusable-snippets.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/reusable-snippets-DGwUAtke.js"), path: "/essentials/reusable-snippets.html", type: "mdx", filePath: "essentials/reusable-snippets.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/settings-CKFP_YUC.js"), path: "/essentials/settings", type: "mdx", filePath: "essentials/settings.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/settings-CKFP_YUC.js"), path: "/essentials/settings.html", type: "mdx", filePath: "essentials/settings.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/snippet-intro-BYimvOfJ.js"), path: "/snippets/snippet-intro", type: "mdx", filePath: "snippets/snippet-intro.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/snippet-intro-BYimvOfJ.js"), path: "/snippets/snippet-intro.html", type: "mdx", filePath: "snippets/snippet-intro.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/create-Dw1kkPdr.js"), path: "/quickstart/create", type: "mdx", filePath: "quickstart/create.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/create-Dw1kkPdr.js"), path: "/quickstart/create.html", type: "mdx", filePath: "quickstart/create.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/overview-waas-B1L6UlFG.js"), path: "/waas/overview-waas", type: "mdx", filePath: "waas/overview-waas.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/overview-waas-B1L6UlFG.js"), path: "/waas/overview-waas.html", type: "mdx", filePath: "waas/overview-waas.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/quickstart-waas-BK5y0vDG.js"), path: "/waas/quickstart-waas", type: "mdx", filePath: "waas/quickstart-waas.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/quickstart-waas-BK5y0vDG.js"), path: "/waas/quickstart-waas.html", type: "mdx", filePath: "waas/quickstart-waas.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/create-DyTNVceg.js"), path: "/api-reference/endpoint/create", type: "mdx", filePath: "api-reference/endpoint/create.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/create-DyTNVceg.js"), path: "/api-reference/endpoint/create.html", type: "mdx", filePath: "api-reference/endpoint/create.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/delete-BsfhHP6e.js"), path: "/api-reference/endpoint/delete", type: "mdx", filePath: "api-reference/endpoint/delete.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/delete-BsfhHP6e.js"), path: "/api-reference/endpoint/delete.html", type: "mdx", filePath: "api-reference/endpoint/delete.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/get-tG5h0LXq.js"), path: "/api-reference/endpoint/get", type: "mdx", filePath: "api-reference/endpoint/get.mdx", lastUpdatedAt: void 0 }, { lazy: () => import("./assets/get-tG5h0LXq.js"), path: "/api-reference/endpoint/get.html", type: "mdx", filePath: "api-reference/endpoint/get.mdx", lastUpdatedAt: void 0 }];
var primitiveColorVars = { background5: "var(--vocs-color_background5)", border: "var(--vocs-color_border)", border2: "var(--vocs-color_border2)" };
var defaultFontFamily = { "default": "system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif", mono: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace' };
var fontFamilyVars = { "default": "var(--vocs-fontFamily_default)", mono: "var(--vocs-fontFamily_mono)" };
var spaceVars = { "4": "var(--vocs-space_4)", "8": "var(--vocs-space_8)", "24": "var(--vocs-space_24)" };
var contentVars = { horizontalPadding: "var(--vocs-content_horizontalPadding)", verticalPadding: "var(--vocs-content_verticalPadding)", width: "var(--vocs-content_width)" };
var iconUrl$1 = "var(--vocs_ExternalLink_iconUrl)";
var root$10 = "vocs_ExternalLink";
const ExternalLink = forwardRef(({ className, children, hideExternalIcon, href, ...props }, ref) => {
  const { basePath } = useConfig();
  const assetBasePath = basePath;
  return jsx("a", { ref, className: clsx(className, hideExternalIcon || typeof children !== "string" ? void 0 : root$10), href, target: "_blank", rel: "noopener noreferrer", style: assignInlineVars({
    [iconUrl$1]: `url(${assetBasePath}/.vocs/icons/arrow-diagonal.svg)`
  }), ...props, children });
});
var root$$ = "vocs_Link";
var accent = "vocs_Link_accent";
var styleless = "vocs_Link_styleless";
function mergeRefs(...refs) {
  return (val) => {
    setRef(val, ...refs);
  };
}
function setRef(val, ...refs) {
  refs.forEach((ref) => {
    if (typeof ref === "function") {
      ref(val);
    } else if (ref != null) {
      ref.current = val;
    }
  });
}
const RouterLink = forwardRef((props, ref) => {
  const loadRoute = () => {
    var _a;
    return (_a = routes$1.find((route) => route.path === props.to)) == null ? void 0 : _a.lazy();
  };
  const { ref: intersectionRef, inView } = useInView();
  useEffect(() => {
    if (inView)
      loadRoute();
  }, [inView]);
  return jsx(Link$2, { ref: mergeRefs(ref, intersectionRef), ...props });
});
const Link$1 = forwardRef((props, ref) => {
  const { hideExternalIcon, href, variant = "accent" } = props;
  const { pathname } = useLocation();
  if (href == null ? void 0 : href.match(/^(www|https?)/))
    return jsx(ExternalLink, { ...props, ref, className: clsx(props.className, root$$, variant === "accent" && accent, variant === "styleless" && styleless), hideExternalIcon });
  const [before, after] = (href || "").split("#");
  const to = `${before ? before : pathname}${after ? `#${after}` : ""}`;
  return jsx(RouterLink, { ...props, ref, className: clsx(props.className, root$$, variant === "accent" && accent, variant === "styleless" && styleless), to });
});
var root$_ = "vocs_NotFound";
var divider$2 = "vocs_NotFound_divider";
var root$Z = "vocs_H1";
var root$Y = "vocs_Heading";
var slugTarget = "vocs_Heading_slugTarget";
function Heading({ level: level2, ...props }) {
  const Component = `h${level2}`;
  return jsxs(Component, { ...props, id: void 0, className: clsx(props.className, root$Y), children: [jsx("div", { id: props.id, className: slugTarget }), props.children] });
}
function H1(props) {
  return jsx(Heading, { ...props, className: clsx(props.className, root$Z), level: 1 });
}
var root$X = "vocs_Paragraph";
function Paragraph(props) {
  return jsx("p", { ...props, className: clsx(props.className, root$X) });
}
function NotFound() {
  return jsxs("div", { className: root$_, children: [jsx(H1, { children: "Page Not Found" }), jsx("div", { style: { height: spaceVars["24"] } }), jsx("hr", { className: divider$2 }), jsx("div", { style: { height: spaceVars["24"] } }), jsx(Paragraph, { children: "The page you were looking for could not be found." }), jsx("div", { style: { height: spaceVars["8"] } }), jsx(Link$1, { href: "/", children: "Go to Home Page" })] });
}
var bannerBackgroundColor = "var(--vocs_Banner_bannerBackgroundColor)";
var bannerHeight = "var(--vocs_Banner_bannerHeight)";
var bannerTextColor = "var(--vocs_Banner_bannerTextColor)";
var root$W = "vocs_Banner";
var content$8 = "vocs_Banner_content";
var inner = "vocs_Banner_inner";
var closeButton = "vocs_Banner_closeButton";
function deserializeElement(element, key) {
  if (typeof element !== "object")
    return element;
  if (element === null)
    return element;
  if (Array.isArray(element))
    return element.map((el, i) => deserializeElement(el, i));
  const props = element.props.children ? { ...element.props, children: deserializeElement(element.props.children) } : element.props;
  return React.createElement(element.type, { ...props, key });
}
function Banner({ hide }) {
  const { banner } = useConfig();
  const ConsumerBanner = useMemo(() => {
    const content2 = (banner == null ? void 0 : banner.content) ?? "";
    if (!content2)
      return null;
    if (typeof content2 !== "string")
      return () => deserializeElement(content2);
    const { default: MDXBanner } = runSync(content2, { ...runtime, Fragment });
    return MDXBanner;
  }, [banner]);
  if (!ConsumerBanner)
    return null;
  return jsx("div", { className: clsx$1(root$W), style: assignInlineVars({
    [bannerBackgroundColor]: banner == null ? void 0 : banner.backgroundColor,
    [bannerTextColor]: banner == null ? void 0 : banner.textColor
  }), children: jsxs("div", { className: clsx$1(inner), children: [jsx("div", { className: clsx$1(content$8), children: jsx(ConsumerBanner, {}) }), (banner == null ? void 0 : banner.dismissable) !== "false" && jsx("button", { className: clsx$1(closeButton), onClick: hide, type: "button", children: jsx(Cross1Icon, { width: 14, height: 14 }) })] }) });
}
var root$V = "vocs_Content";
function Content$2({ children, className }) {
  return jsx("article", { className: clsx(className, root$V), children });
}
const Layout = ({ children }) => children;
const Footer$1 = ({ children }) => children;
const TopNavEnd = ({ children }) => children;
function getActiveNavIds({ items: items2, pathname }) {
  const path = pathname.replace(/\.html$/, "");
  const activeIds = [];
  for (const item2 of items2) {
    if (item2.link && path.startsWith(item2.match || item2.link))
      activeIds.push(item2.id);
    else if (item2.items) {
      const activeChildItems = getActiveNavIds({ items: item2.items, pathname });
      if (activeChildItems.length > 0)
        activeIds.push(item2.id);
    }
  }
  return activeIds;
}
function useActiveNavIds({ items: items2, pathname }) {
  return useMemo(() => getActiveNavIds({ items: items2, pathname }), [items2, pathname]);
}
function usePageData() {
  const pageData = useContext(PageDataContext);
  if (!pageData)
    throw new Error("`usePageData` must be used within `PageDataContext.Provider`.");
  return pageData;
}
const PageDataContext = createContext(void 0);
function useSidebar() {
  const { pathname } = useLocation();
  const config2 = useConfig();
  const { sidebar: sidebar2 } = config2;
  if (!sidebar2)
    return { items: [] };
  if (Array.isArray(sidebar2))
    return { items: sidebar2 };
  const sidebarKey = useMemo(() => {
    const keys = Object.keys(sidebar2).filter((key) => pathname.startsWith(key));
    return keys[keys.length - 1];
  }, [sidebar2, pathname]);
  if (!sidebarKey)
    return { items: [] };
  if (Array.isArray(sidebar2[sidebarKey]))
    return { key: sidebarKey, items: sidebar2[sidebarKey] };
  return { ...sidebar2[sidebarKey], key: sidebarKey };
}
function useLayout() {
  const sidebar2 = useSidebar();
  const { frontmatter } = usePageData();
  const { layout: layout_, showLogo, showOutline, showSidebar, showTopNav } = frontmatter || {};
  const layout = layout_ ?? "docs";
  return {
    layout,
    get showLogo() {
      if (typeof showLogo !== "undefined")
        return showLogo;
      return true;
    },
    get showOutline() {
      if (typeof showOutline !== "undefined")
        return showOutline;
      return layout === "docs";
    },
    get showSidebar() {
      if (sidebar2.items.length === 0)
        return false;
      if (typeof showSidebar !== "undefined")
        return showSidebar;
      if (layout === "minimal")
        return false;
      if (layout === "landing")
        return false;
      return true;
    },
    get showTopNav() {
      if (typeof showTopNav !== "undefined")
        return showTopNav;
      return true;
    }
  };
}
const getSearchIndex = async () => JSON.stringify(await (await fetch("/.vocs/search-index-59aef4a7.json")).json());
let promise;
function useSearchIndex() {
  const [searchIndex, setSearchIndex] = useState();
  useEffect(() => {
    (async () => {
      if (!promise)
        promise = getSearchIndex();
      const json = await promise;
      const searchIndex2 = MiniSearch.loadJSON(json, {
        fields: ["title", "titles", "text"],
        searchOptions: {
          boost: { title: 4, text: 2, titles: 1 },
          fuzzy: 0.2,
          prefix: true
          // ...(theme.value.search?.provider === 'local' &&
          //   theme.value.search.options?.miniSearch?.searchOptions),
        },
        storeFields: ["href", "html", "isPage", "text", "title", "titles"]
        // ...(theme.value.search?.provider === 'local' &&
        //   theme.value.search.options?.miniSearch?.options),
      });
      setSearchIndex(searchIndex2);
    })();
  }, []);
  useEffect(() => {
    return;
  }, []);
  return searchIndex;
}
var search = "vocs_DesktopSearch_search";
var searchCommand = "vocs_DesktopSearch_searchCommand";
function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const timer = setTimeout(() => setDebouncedValue(value), delay);
    return () => {
      clearTimeout(timer);
    };
  }, [value, delay]);
  return debouncedValue;
}
function useLocalStorage(key, defaultValue) {
  const [value, setValue] = useState();
  useEffect(() => {
    const initialValue = getItem(key);
    if (typeof initialValue === "undefined" || initialValue === null) {
      setValue(typeof defaultValue === "function" ? defaultValue() : defaultValue);
    } else {
      setValue(initialValue);
    }
  }, [defaultValue, key]);
  const setter = useCallback((updater) => {
    setValue((old) => {
      let newVal;
      if (typeof updater === "function")
        newVal = updater(old);
      else
        newVal = updater;
      try {
        localStorage.setItem(key, JSON.stringify(newVal));
      } catch {
      }
      return newVal;
    });
  }, [key]);
  return [value, setter];
}
function getItem(key) {
  try {
    const itemValue = localStorage.getItem(key);
    if (typeof itemValue === "string") {
      return JSON.parse(itemValue);
    }
    return void 0;
  } catch {
    return void 0;
  }
}
var visuallyHidden = "vocs_utils_visuallyHidden";
var root$U = "vocs_Kbd";
function Kbd(props) {
  return jsx("kbd", { ...props, className: clsx(props.className, root$U) });
}
var root$T = "vocs_KeyboardShortcut";
var kbdGroup = "vocs_KeyboardShortcut_kbdGroup";
function KeyboardShortcut(props) {
  const { description: description2, keys } = props;
  return jsxs("span", { className: root$T, children: [description2, jsx("span", { className: kbdGroup, children: keys.map((key) => jsx(Kbd, { children: key }, key)) })] });
}
var root$S = "vocs_SearchDialog";
var overlay = "vocs_SearchDialog_overlay";
var searchBox = "vocs_SearchDialog_searchBox";
var searchInput = "vocs_SearchDialog_searchInput";
var searchInputIcon = "vocs_SearchDialog_searchInputIcon";
var searchInputIconDesktop = "vocs_SearchDialog_searchInputIconDesktop";
var searchInputIconMobile = "vocs_SearchDialog_searchInputIconMobile";
var results = "vocs_SearchDialog_results";
var result = "vocs_SearchDialog_result";
var resultSelected = "vocs_SearchDialog_resultSelected";
var resultIcon = "vocs_SearchDialog_resultIcon";
var titles = "vocs_SearchDialog_titles";
var title$4 = "vocs_SearchDialog_title";
var titleIcon = "vocs_SearchDialog_titleIcon";
var content$7 = "vocs_SearchDialog_content";
var excerpt = "vocs_SearchDialog_excerpt";
var searchShortcuts = "vocs_SearchDialog_searchShortcuts";
function SearchDialog(props) {
  const { search: searchOptions } = useConfig();
  const navigate = useNavigate();
  const inputRef = useRef(null);
  const listRef = useRef(null);
  const [filterText, setFilterText] = useLocalStorage("filterText", "");
  const searchTerm = useDebounce(filterText, 200);
  const searchIndex = useSearchIndex();
  const [selectedIndex, setSelectedIndex] = useState(-1);
  const [disableMouseOver, setDisableMouseOver] = useState(false);
  const [showDetailView, setShowDetailView] = useLocalStorage("showDetailView", true);
  const results$1 = useMemo(() => {
    if (!searchIndex)
      return [];
    if (!searchTerm) {
      setSelectedIndex(-1);
      return [];
    }
    setSelectedIndex(0);
    return searchIndex.search(searchTerm, searchOptions).slice(0, 16);
  }, [searchIndex, searchOptions, searchTerm]);
  const resultsCount = results$1.length;
  const selectedResult = results$1[selectedIndex];
  const highlight = useCallback(() => {
    var _a, _b, _c;
    if (!listRef.current)
      return;
    const terms = /* @__PURE__ */ new Set();
    for (const result2 of results$1) {
      for (const term in result2.match) {
        terms.add(term);
      }
    }
    const mark = new Mark(listRef.current);
    mark.unmark({
      done() {
        mark == null ? void 0 : mark.markRegExp(formMarkRegex(terms));
      }
    });
    const excerptElements = listRef.current.querySelectorAll(`.${excerpt}`);
    for (const element of excerptElements) {
      (_a = element.querySelector('mark[data-markjs="true"]')) == null ? void 0 : _a.scrollIntoView({ block: "center" });
    }
    (_c = (_b = listRef.current) == null ? void 0 : _b.firstElementChild) == null ? void 0 : _c.scrollIntoView({ block: "start" });
  }, [results$1]);
  useEffect(() => {
    if (!props.open)
      return;
    function keyDownHandler(event) {
      var _a;
      switch (event.key) {
        case "ArrowDown": {
          event.preventDefault();
          setSelectedIndex((index) => {
            var _a2;
            let nextIndex = index + 1;
            if (nextIndex >= resultsCount)
              nextIndex = 0;
            const element = (_a2 = listRef.current) == null ? void 0 : _a2.children[nextIndex];
            element == null ? void 0 : element.scrollIntoView({ block: "nearest" });
            return nextIndex;
          });
          setDisableMouseOver(true);
          break;
        }
        case "ArrowUp": {
          event.preventDefault();
          setSelectedIndex((index) => {
            var _a2;
            let nextIndex = index - 1;
            if (nextIndex < 0)
              nextIndex = resultsCount - 1;
            const element = (_a2 = listRef.current) == null ? void 0 : _a2.children[nextIndex];
            element == null ? void 0 : element.scrollIntoView({ block: "nearest" });
            return nextIndex;
          });
          setDisableMouseOver(true);
          break;
        }
        case "Backspace": {
          if (!event.metaKey)
            return;
          event.preventDefault();
          setFilterText("");
          (_a = inputRef.current) == null ? void 0 : _a.focus();
          break;
        }
        case "Enter": {
          if (event.target instanceof HTMLButtonElement && event.target.type !== "submit")
            return;
          if (!selectedResult)
            return;
          event.preventDefault();
          navigate(selectedResult.href);
          props.onClose();
          break;
        }
      }
    }
    window.addEventListener("keydown", keyDownHandler);
    return () => {
      window.removeEventListener("keydown", keyDownHandler);
    };
  }, [navigate, resultsCount, setFilterText, selectedResult, props.open, props.onClose]);
  useEffect(() => {
    if (searchTerm === "")
      return;
    if (!listRef.current)
      return;
    highlight();
  }, [highlight, searchTerm]);
  return jsxs(Dialog.Portal, { children: [jsx(Dialog.Overlay, { className: overlay }), jsxs(Dialog.Content, { onOpenAutoFocus: (event) => {
    if (inputRef.current) {
      event.preventDefault();
      inputRef.current.focus();
    }
    highlight();
  }, onCloseAutoFocus: () => {
    setSelectedIndex(0);
  }, className: root$S, "aria-describedby": void 0, children: [jsx(Dialog.Title, { className: visuallyHidden, children: "Search" }), jsxs("form", { className: searchBox, children: [jsx("button", { "aria-label": "Close search dialog", type: "button", onClick: () => props.onClose(), className: searchInputIconMobile, children: jsx(ArrowLeftIcon, { className: searchInputIcon, height: 20, width: 20 }) }), jsx(Label.Root, { htmlFor: "search-input", children: jsx(MagnifyingGlassIcon, { "aria-label": "Search", className: clsx$1(searchInputIcon, searchInputIconDesktop), height: 20, width: 20 }) }), jsx("input", { ref: inputRef, tabIndex: 0, className: searchInput, id: "search-input", onChange: (event) => setFilterText(event.target.value), placeholder: "Search", type: "search", value: filterText }), jsx("button", { "aria-label": "Toggle detail view", type: "button", onClick: () => setShowDetailView((x) => !x), children: jsx(ListBulletIcon, { className: searchInputIcon, height: 20, width: 20 }) }), jsx("button", { "aria-label": "Reset search", type: "button", className: searchInputIcon, onClick: () => {
    var _a;
    setFilterText("");
    (_a = inputRef.current) == null ? void 0 : _a.focus();
  }, children: "⌫" })] }), jsxs("ul", { className: results, role: results$1.length ? "listbox" : void 0, onMouseMove: () => setDisableMouseOver(false), ref: listRef, children: [searchTerm && results$1.length === 0 && jsxs("li", { children: ['No results for "', jsx("span", { children: searchTerm }), '"'] }), results$1.map((result$1, index) => {
    var _a;
    return (
      // biome-ignore lint/a11y/useFocusableInteractive:
      jsx("li", {
        // biome-ignore lint/a11y/noNoninteractiveElementToInteractiveRole:
        // biome-ignore lint/a11y/useSemanticElements:
        role: "option",
        className: clsx$1(result, index === selectedIndex && resultSelected),
        "aria-selected": index === selectedIndex,
        "aria-label": [...result$1.titles.filter((title2) => Boolean(title2)), result$1.title].join(" > "),
        children: jsxs(Link$2, { to: result$1.href, onClick: (event) => {
          if (event.metaKey)
            return;
          props.onClose();
        }, onMouseEnter: () => !disableMouseOver && setSelectedIndex(index), onFocus: () => setSelectedIndex(index), children: [jsxs("div", { className: titles, children: [result$1.isPage ? jsx(FileIcon, { className: resultIcon }) : jsx("span", { className: resultIcon, children: "#" }), result$1.titles.filter((title2) => Boolean(title2)).map((title2) => jsxs("span", { className: title$4, children: [jsx("span", {
          // biome-ignore lint/security/noDangerouslySetInnerHtml:
          dangerouslySetInnerHTML: { __html: title2 }
        }), jsx(ChevronRightIcon, { className: titleIcon })] }, title2)), jsx("span", { className: title$4, children: jsx("span", {
          // biome-ignore lint/security/noDangerouslySetInnerHtml:
          dangerouslySetInnerHTML: { __html: result$1.title }
        }) })] }), showDetailView && ((_a = result$1.text) == null ? void 0 : _a.trim()) && jsx("div", { className: excerpt, children: jsx(Content$2, { className: content$7, children: jsx("div", {
          // biome-ignore lint/security/noDangerouslySetInnerHtml:
          dangerouslySetInnerHTML: { __html: result$1.html }
        }) }) })] })
      }, result$1.id)
    );
  })] }), jsxs("div", { className: searchShortcuts, children: [jsx(KeyboardShortcut, { description: "Navigate", keys: ["↑", "↓"] }), jsx(KeyboardShortcut, { description: "Select", keys: ["enter"] }), jsx(KeyboardShortcut, { description: "Close", keys: ["esc"] }), jsx(KeyboardShortcut, { description: "Reset", keys: ["⌘", "⌫"] })] })] })] });
}
function formMarkRegex(terms) {
  return new RegExp([...terms].sort((a, b) => b.length - a.length).map((term) => {
    return `(${term.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d")})`;
  }).join("|"), "gi");
}
function DesktopSearch() {
  useSearchIndex();
  const [open, setOpen] = useState(false);
  useEffect(() => {
    function keyDownHandler(event) {
      const isInput = document.activeElement instanceof HTMLElement && (["input", "select", "textarea"].includes(document.activeElement.tagName.toLowerCase()) || document.activeElement.isContentEditable);
      if (event.key === "/" && !open && !isInput) {
        event.preventDefault();
        setOpen(true);
      } else if (event.metaKey === true && event.key === "k") {
        event.preventDefault();
        setOpen((x) => !x);
      }
    }
    window.addEventListener("keydown", keyDownHandler);
    return () => {
      window.removeEventListener("keydown", keyDownHandler);
    };
  }, [open]);
  return jsxs(Dialog.Root, { open, onOpenChange: setOpen, children: [jsx(Dialog.Trigger, { asChild: true, children: jsxs("button", { className: search, type: "button", children: [jsx(MagnifyingGlassIcon, { style: { marginTop: 2 } }), "Search...", jsx("div", { className: searchCommand, children: jsx("div", { style: {
    background: "currentColor",
    transform: "rotate(45deg)",
    width: 1.5,
    borderRadius: 2,
    height: "100%"
  } }) })] }) }), jsx(SearchDialog, { open, onClose: () => setOpen(false) })] });
}
var root$R = "vocs_DesktopTopNav";
var withLogo = "vocs_DesktopTopNav_withLogo";
var content$6 = "vocs_DesktopTopNav_content";
var curtain$1 = "vocs_DesktopTopNav_curtain";
var group$2 = "vocs_DesktopTopNav_group";
var item$4 = "vocs_DesktopTopNav_item";
var logo$2 = "vocs_DesktopTopNav_logo";
var logoWrapper$1 = "vocs_DesktopTopNav_logoWrapper";
var section$2 = "vocs_DesktopTopNav_section";
var root$Q = "vocs_Logo";
var logoDark = "vocs_Logo_logoDark";
var logoLight = "vocs_Logo_logoLight";
function Logo({ className }) {
  const { logoUrl } = useConfig();
  if (!logoUrl)
    return null;
  return jsx(Fragment$1, { children: typeof logoUrl === "string" ? jsx("img", { alt: "Logo", className: clsx$1(className, root$Q), src: logoUrl }) : jsxs(Fragment$1, { children: [jsx("img", { alt: "Logo", className: clsx$1(className, root$Q, logoDark), src: logoUrl.dark }), jsx("img", { alt: "Logo", className: clsx$1(className, root$Q, logoLight), src: logoUrl.light })] }) });
}
var logoImage = "vocs_NavLogo_logoImage";
var title$3 = "vocs_NavLogo_title";
function NavLogo() {
  const config2 = useConfig();
  if (config2.logoUrl)
    return jsx(Logo, { className: logoImage });
  return jsx("div", { className: title$3, children: config2.title });
}
var root$P = "vocs_NavigationMenu";
var list$1 = "vocs_NavigationMenu_list";
var link$2 = "vocs_NavigationMenu_link";
var item$3 = "vocs_NavigationMenu_item";
var chevronDownIcon$1 = "var(--vocs_NavigationMenu_chevronDownIcon)";
var trigger$1 = "vocs_NavigationMenu_trigger vocs_NavigationMenu_link";
var content$5 = "vocs_NavigationMenu_content";
const Root$2 = (props) => jsx(NavigationMenu.Root, { ...props, className: clsx$1(props.className, root$P) });
const List$2 = (props) => jsx(NavigationMenu.List, { ...props, className: clsx$1(props.className, list$1) });
const Link = ({ active, children, className, href }) => jsx(NavigationMenu.Link, { asChild: true, children: jsx(Link$1, { "data-active": active, className: clsx$1(className, link$2), href, variant: "styleless", children }) });
const Item = (props) => jsx(NavigationMenu.Item, { ...props, className: clsx$1(props.className, item$3) });
const Trigger$1 = ({ active, className, ...props }) => {
  const { basePath } = useConfig();
  const assetBasePath = basePath;
  return jsx(NavigationMenu.Trigger, { ...props, "data-active": active, className: clsx$1(className, trigger$1), style: assignInlineVars({
    [chevronDownIcon$1]: `url(${assetBasePath}/.vocs/icons/chevron-down.svg)`
  }) });
};
const Content$1 = (props) => jsx(NavigationMenu.Content, { ...props, className: clsx$1(props.className, content$5) });
DesktopTopNav.Curtain = Curtain$1;
function DesktopTopNav() {
  var _a;
  const config2 = useConfig();
  const { showLogo, showSidebar } = useLayout();
  return jsxs("div", { className: clsx$1(root$R, showLogo && !showSidebar && withLogo), children: [jsx(DesktopSearch, {}), showLogo && jsx("div", { className: logoWrapper$1, children: jsx("div", { className: logo$2, children: jsx(RouterLink, { to: "/", style: { alignItems: "center", display: "flex", height: "56px", marginTop: "4px" }, children: jsx(NavLogo, {}) }) }) }), jsx("div", { className: section$2 }), jsx("div", { className: section$2, children: (((_a = config2.topNav) == null ? void 0 : _a.length) || 0) > 0 && jsx("div", { className: group$2, children: jsx(Navigation$2, {}) }) })] });
}
function Curtain$1() {
  return jsx("div", { className: curtain$1 });
}
function Navigation$2() {
  const { topNav } = useConfig();
  if (!topNav)
    return null;
  const { pathname } = useLocation();
  const activeIds = useActiveNavIds({ pathname, items: topNav });
  return jsx(Root$2, { delayDuration: 0, children: jsxs(List$2, { children: [topNav.map((item2, i) => {
    if (item2.element)
      return deserializeElement(item2.element);
    if (item2.link)
      return jsx(Link, { active: activeIds.includes(item2.id), className: item$4, href: item2.link, children: item2.text }, i);
    if (item2.items)
      return jsxs(Item, { className: item$4, children: [jsx(Trigger$1, { active: activeIds.includes(item2.id), children: item2.text }), jsx(Content$1, { className: content$6, children: jsx(NavigationMenuContent$1, { items: item2.items }) })] }, i);
    return null;
  }), jsx(TopNavEnd, {})] }) });
}
function NavigationMenuContent$1({ items: items2 }) {
  const { pathname } = useLocation();
  const activeIds = useActiveNavIds({ pathname, items: items2 });
  return jsx("ul", { children: items2 == null ? void 0 : items2.map((item2, i) => jsx(Link, { active: activeIds.includes(item2.id), href: item2.link, children: item2.text }, i)) });
}
function useEditLink() {
  const pageData = usePageData();
  const config2 = useConfig();
  return useMemo(() => {
    const { pattern = "", text = "Edit page" } = config2.editLink ?? {};
    let url = "";
    if (typeof pattern === "function")
      url = "";
    else if (pageData.filePath)
      url = pattern.replace(/:path/g, pageData.filePath);
    return { url, text };
  }, [config2.editLink, pageData.filePath]);
}
function useMounted() {
  const [mounted, setMounted] = useState(false);
  useEffect(() => {
    setMounted(true);
  }, []);
  return mounted;
}
var root$O = "vocs_Footer";
var container = "vocs_Footer_container";
var editLink = "vocs_Footer_editLink";
var lastUpdated = "vocs_Footer_lastUpdated";
var navigation$2 = "vocs_Footer_navigation";
var navigationIcon = "vocs_Footer_navigationIcon";
var navigationIcon_left = "vocs_Footer_navigationIcon_left";
var navigationIcon_right = "vocs_Footer_navigationIcon_right";
var navigationItem$1 = "vocs_Footer_navigationItem";
var navigationItem_left = "vocs_Footer_navigationItem_left";
var navigationItem_right = "vocs_Footer_navigationItem_right";
var navigationText = "vocs_Footer_navigationText";
var navigationTextInner = "vocs_Footer_navigationTextInner";
var sizeVar = "var(--vocs_Icon_size)";
var root$N = "vocs_Icon";
function Icon({ className, label, icon: Icon2, size, style }) {
  return jsx("div", { "aria-label": label, className: clsx$1(root$N, className), role: "img", style: {
    ...style,
    ...assignInlineVars({ [sizeVar]: size })
  }, children: jsx(Icon2, { height: size, width: size }) });
}
var root$M = "vocs_Socials";
var button = "vocs_Socials_button";
var icon$1 = "vocs_Socials_icon";
function Discord() {
  return jsxs("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 127.14 96.36", children: [jsx("title", { children: "Discord" }), jsx("g", { id: "图层_2", "data-name": "图层 2", children: jsx("g", { id: "Discord_Logos", "data-name": "Discord Logos", children: jsx("g", { id: "Discord_Logo_-_Large_-_White", "data-name": "Discord Logo - Large - White", children: jsx("path", { d: "M107.7,8.07A105.15,105.15,0,0,0,81.47,0a72.06,72.06,0,0,0-3.36,6.83A97.68,97.68,0,0,0,49,6.83,72.37,72.37,0,0,0,45.64,0,105.89,105.89,0,0,0,19.39,8.09C2.79,32.65-1.71,56.6.54,80.21h0A105.73,105.73,0,0,0,32.71,96.36,77.7,77.7,0,0,0,39.6,85.25a68.42,68.42,0,0,1-10.85-5.18c.91-.66,1.8-1.34,2.66-2a75.57,75.57,0,0,0,64.32,0c.87.71,1.76,1.39,2.66,2a68.68,68.68,0,0,1-10.87,5.19,77,77,0,0,0,6.89,11.1A105.25,105.25,0,0,0,126.6,80.22h0C129.24,52.84,122.09,29.11,107.7,8.07ZM42.45,65.69C36.18,65.69,31,60,31,53s5-12.74,11.43-12.74S54,46,53.89,53,48.84,65.69,42.45,65.69Zm42.24,0C78.41,65.69,73.25,60,73.25,53s5-12.74,11.44-12.74S96.23,46,96.12,53,91.08,65.69,84.69,65.69Z", fill: "currentColor" }) }) }) })] });
}
function GitHub() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 98 96", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "GitHub" }), jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z", fill: "currentColor" })] });
}
function Telegram() {
  return jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "100%", height: "100%", viewBox: "0 0 50 50", children: [jsx("title", { children: "Telegram" }), jsx("path", { d: "M25 2c12.703 0 23 10.297 23 23S37.703 48 25 48 2 37.703 2 25 12.297 2 25 2zm7.934 32.375c.423-1.298 2.405-14.234 2.65-16.783.074-.772-.17-1.285-.648-1.514-.578-.278-1.434-.139-2.427.219-1.362.491-18.774 7.884-19.78 8.312-.954.405-1.856.847-1.856 1.487 0 .45.267.703 1.003.966.766.273 2.695.858 3.834 1.172 1.097.303 2.346.04 3.046-.395.742-.461 9.305-6.191 9.92-6.693.614-.502 1.104.141.602.644-.502.502-6.38 6.207-7.155 6.997-.941.959-.273 1.953.358 2.351.721.454 5.906 3.932 6.687 4.49.781.558 1.573.811 2.298.811.725 0 1.107-.955 1.468-2.064z", fill: "currentColor" })] });
}
function Warpcast() {
  return jsxs("svg", { width: "32", height: "32", viewBox: "0 0 32 32", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Warpcast" }), jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M7.92028 31.9901H24.0698C28.4371 31.9901 31.9901 28.4373 31.9901 24.0699V7.92053C31.9901 3.55319 28.4371 0.000137329 24.0698 0.000137329H7.92028C3.55304 0.000137329 0 3.55319 0 7.92053V24.0699C0 28.4373 3.55304 31.9901 7.92028 31.9901ZM19.4134 16.048L20.9908 10.124H25.1383L21.2924 23.2218H17.7062L15.9951 17.1397L14.284 23.2218H10.7055L6.85115 10.124H10.999L12.5915 16.0916L14.1891 10.124H17.8309L19.4134 16.048Z", fill: "currentColor" })] });
}
function X() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 1200 1227", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "X" }), jsx("path", { d: "M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z", fill: "currentColor" })] });
}
const iconsForIcon = {
  discord: Discord,
  github: GitHub,
  telegram: Telegram,
  warpcast: Warpcast,
  x: X
};
const sizesForType = {
  discord: "18px",
  github: "17px",
  telegram: "17px",
  warpcast: "17px",
  x: "16px"
};
function Socials() {
  const config2 = useConfig();
  if (!config2.socials)
    return null;
  if (config2.socials.length === 0)
    return null;
  return jsx("div", { className: root$M, children: config2.socials.map((social, i) => jsxs(Fragment, { children: [i !== 0 && jsx("div", { style: {
    width: "1px",
    marginTop: spaceVars[4],
    marginBottom: spaceVars[4],
    backgroundColor: primitiveColorVars.border
  } }), jsx("a", { className: button, href: social.link, target: "_blank", rel: "noopener noreferrer", children: jsx(Icon, { className: icon$1, label: social.label, icon: iconsForIcon[social.icon], size: sizesForType[social.icon] || "20px" }) })] }, i)) });
}
function ArrowLeft() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 72 60", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Arrow Left" }), jsx("path", { d: "M0.325684 29.7461C0.325684 30.8203 0.813963 31.8457 1.69286 32.6758L26.8882 57.8223C27.7671 58.6524 28.7437 59.043 29.7691 59.043C31.9175 59.043 33.5777 57.4317 33.5777 55.2344C33.5777 54.209 33.2359 53.1836 32.5035 52.5L25.7652 45.5176L9.26126 30.6738L8.38236 32.7734L21.3706 33.7012H67.4644C69.7593 33.7012 71.3706 32.041 71.3706 29.7461C71.3706 27.4512 69.7593 25.791 67.4644 25.791H21.3706L8.38236 26.7188L9.26126 28.8672L25.7652 13.9746L32.5035 6.99221C33.2359 6.30861 33.5777 5.28322 33.5777 4.25782C33.5777 2.06052 31.9175 0.449219 29.7691 0.449219C28.7437 0.449219 27.7671 0.839814 26.8882 1.66991L1.69286 26.8164C0.813963 27.6465 0.325684 28.6719 0.325684 29.7461Z", fill: "currentColor" })] });
}
function ArrowRight() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 72 60", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Arrow Right" }), jsx("path", { d: "M71.3706 29.7461C71.3706 28.6719 70.8824 27.6465 70.0035 26.8164L44.8081 1.66991C43.9292 0.839814 42.9527 0.449219 41.9273 0.449219C39.7789 0.449219 38.1187 2.06052 38.1187 4.25782C38.1187 5.28322 38.4605 6.30861 39.1929 6.99221L45.9312 13.9746L62.4351 28.8672L63.314 26.7188L50.3257 25.791H4.23196C1.93706 25.791 0.325684 27.4512 0.325684 29.7461C0.325684 32.041 1.93706 33.7012 4.23196 33.7012H50.3257L63.314 32.7734L62.4351 30.6738L45.9312 45.5176L39.1929 52.5C38.4605 53.1836 38.1187 54.209 38.1187 55.2344C38.1187 57.4317 39.7789 59.043 41.9273 59.043C42.9527 59.043 43.9292 58.6524 44.8081 57.8223L70.0035 32.6758C70.8824 31.8457 71.3706 30.8203 71.3706 29.7461Z", fill: "currentColor" })] });
}
function Footer() {
  const { layout } = useLayout();
  const mounted = useMounted();
  const pageData = usePageData();
  const lastUpdatedAtDate = useMemo(() => pageData.lastUpdatedAt ? new Date(pageData.lastUpdatedAt) : void 0, [pageData.lastUpdatedAt]);
  const lastUpdatedAtISOString = useMemo(() => lastUpdatedAtDate == null ? void 0 : lastUpdatedAtDate.toISOString(), [lastUpdatedAtDate]);
  return jsxs("footer", { className: root$O, "data-layout": layout, children: [layout === "docs" && jsxs(Fragment$1, { children: [jsxs("div", { className: container, children: [jsx(EditLink, {}), mounted && pageData.lastUpdatedAt && jsxs("div", { className: lastUpdated, children: ["Last updated:", " ", jsx("time", { dateTime: lastUpdatedAtISOString, children: new Intl.DateTimeFormat(void 0, {
    dateStyle: "short",
    timeStyle: "short"
  }).format(lastUpdatedAtDate) })] })] }), jsx(Navigation$1, {})] }), layout !== "docs" && jsx(Socials, {}), jsx(Footer$1, {})] });
}
function EditLink() {
  const editLink$1 = useEditLink();
  if (!editLink$1.url)
    return null;
  return jsx("div", { children: jsxs(Link$1, { className: editLink, href: editLink$1.url, children: [jsx(Pencil2Icon, {}), " ", editLink$1.text] }) });
}
function Navigation$1() {
  const mounted = useMounted();
  const sidebar2 = useSidebar();
  const { pathname } = useLocation();
  const flattenedSidebar = useMemo(() => flattenSidebar(sidebar2.items || []).filter((item2) => item2.link), [sidebar2]);
  const currentPageIndex = useMemo(() => flattenedSidebar.findIndex((item2) => item2.link === pathname), [flattenedSidebar, pathname]);
  const [prevPage, nextPage] = useMemo(() => {
    if (currentPageIndex < 0)
      return [];
    if (currentPageIndex === 0)
      return [null, flattenedSidebar[currentPageIndex + 1]];
    if (currentPageIndex === flattenedSidebar.length - 1)
      return [flattenedSidebar[currentPageIndex - 1], null];
    return [flattenedSidebar[currentPageIndex - 1], flattenedSidebar[currentPageIndex + 1]];
  }, [currentPageIndex, flattenedSidebar]);
  const navigate = useNavigate();
  useEffect(() => {
    let index = currentPageIndex;
    let isListening = false;
    const keydown = (event) => {
      if (event.code === "ShiftLeft")
        isListening = true;
      if (isListening) {
        const nextPage2 = flattenedSidebar[index + 1];
        const prevPage2 = flattenedSidebar[index - 1];
        if (event.code === "ArrowRight" && (nextPage2 == null ? void 0 : nextPage2.link)) {
          const isExternalLink = !nextPage2.link.match(/^(\.*\/|#)/);
          if (isExternalLink)
            window.open(nextPage2.link, "noopener,noreferrer");
          else
            navigate(nextPage2.link);
          index++;
        }
        if (event.code === "ArrowLeft" && (prevPage2 == null ? void 0 : prevPage2.link)) {
          const isExternalLink = !prevPage2.link.match(/^(\.*\/|#)/);
          if (isExternalLink)
            window.open(prevPage2.link, "noopener,noreferrer");
          else
            navigate(prevPage2.link);
          index--;
        }
      }
    };
    const keyup = (event) => {
      if (event.code === "ShiftLeft")
        isListening = false;
    };
    window.addEventListener("keydown", keydown);
    window.addEventListener("keyup", keyup);
    return () => {
      window.removeEventListener("keydown", keydown);
      window.removeEventListener("keyup", keyup);
    };
  }, []);
  if (!mounted)
    return null;
  return jsxs("div", { className: navigation$2, children: [prevPage ? jsxs(Link$1, { className: clsx$1(navigationItem$1, navigationItem_left), href: prevPage.link, variant: "styleless", children: [jsxs("div", { className: navigationText, children: [jsx("div", { className: clsx$1(navigationIcon, navigationIcon_left), style: assignInlineVars({ [sizeVar]: "0.75em" }), children: jsx(Icon, { label: "Previous", icon: ArrowLeft }) }), jsx("div", { className: navigationTextInner, children: prevPage.text })] }), jsx(KeyboardShortcut, { description: "Previous", keys: ["shift", "←"] })] }) : jsx("div", {}), nextPage ? jsxs(Link$1, { className: clsx$1(navigationItem$1, navigationItem_right), href: nextPage.link, variant: "styleless", children: [jsxs("div", { className: navigationText, children: [jsx("div", { className: navigationTextInner, style: { textAlign: "right" }, children: nextPage.text }), jsx("div", { className: clsx$1(navigationIcon, navigationIcon_right), style: assignInlineVars({ [sizeVar]: "0.75em" }), children: jsx(Icon, { label: "Next", icon: ArrowRight }) })] }), jsx(KeyboardShortcut, { description: "Next", keys: ["shift", "→"] })] }) : jsx("div", {})] });
}
function flattenSidebar(sidebar2) {
  const items2 = [];
  for (const item2 of sidebar2) {
    if (item2.link) {
      items2.push(item2);
    }
    if (item2.items) {
      items2.push(...flattenSidebar(item2.items));
    }
  }
  return items2;
}
var searchButton = "vocs_MobileSearch_searchButton";
function MobileSearch() {
  const [open, setOpen] = useState(false);
  return jsxs(Dialog.Root, { open, onOpenChange: setOpen, children: [jsx(Dialog.Trigger, { asChild: true, children: jsx("button", { className: searchButton, type: "button", "aria-label": "Search", children: jsx(MagnifyingGlassIcon, { height: 21, width: 21 }) }) }), jsx(SearchDialog, { open, onClose: () => setOpen(false) })] });
}
var root$L = "vocs_MobileTopNav";
var content$4 = "vocs_MobileTopNav_content";
var curtain = "vocs_MobileTopNav_curtain";
var curtainGroup = "vocs_MobileTopNav_curtainGroup";
var curtainItem = "vocs_MobileTopNav_curtainItem";
var group$1 = "vocs_MobileTopNav_group";
var item$2 = "vocs_MobileTopNav_item";
var logo$1 = "vocs_MobileTopNav_logo";
var menuTrigger = "vocs_MobileTopNav_menuTrigger";
var menuTitle = "vocs_MobileTopNav_menuTitle";
var navigation_compact = "vocs_MobileTopNav_navigation_compact";
var navigation$1 = "vocs_MobileTopNav_navigation";
var navigationContent = "vocs_MobileTopNav_navigationContent";
var navigationItem = "vocs_MobileTopNav_navigationItem";
var chevronDownIcon = "var(--vocs_MobileTopNav_chevronDownIcon)";
var chevronUpIcon = "var(--vocs_MobileTopNav_chevronUpIcon)";
var navigationTrigger = "vocs_MobileTopNav_trigger";
var outlineTrigger = "vocs_MobileTopNav_outlineTrigger";
var outlinePopover = "vocs_MobileTopNav_outlinePopover";
var section$1 = "vocs_MobileTopNav_section";
var separator$1 = "vocs_MobileTopNav_separator";
var sidebarPopover = "vocs_MobileTopNav_sidebarPopover";
var topNavPopover = "vocs_MobileTopNav_topNavPopover";
var topNavPopoverFooter = "vocs_MobileTopNav_topNavPopoverFooter";
function debounce(fn, delay) {
  let invoked = false;
  return () => {
    invoked = true;
    setTimeout(() => {
      if (invoked)
        fn();
      invoked = false;
    }, delay);
  };
}
var root$K = "vocs_Outline";
var nav = "vocs_Outline_nav";
var heading = "vocs_Outline_heading";
var items$1 = "vocs_Outline_items";
var item$1 = "vocs_Outline_item";
var link$1 = "vocs_Outline_link";
function Outline({ minLevel = 2, maxLevel: maxLevel_ = 3, highlightActive = true, onClickItem, showTitle = true } = {}) {
  const { outlineFooter } = useConfig();
  const { showOutline } = useLayout();
  const maxLevel = (() => {
    if (typeof showOutline === "number")
      return minLevel + showOutline - 1;
    return maxLevel_;
  })();
  const active = useRef(true);
  const { pathname, hash } = useLocation();
  const [headingElements, setHeadingElements] = useState([]);
  useEffect(() => {
    if (typeof window === "undefined")
      return;
    const elements = Array.from(document.querySelectorAll(`.${root$Y}`));
    setHeadingElements(elements);
  }, [pathname]);
  const items2 = useMemo(() => {
    if (!headingElements)
      return [];
    return headingElements.map((element) => {
      const slugTargetElement = element.querySelector(`.${slugTarget}`);
      if (!slugTargetElement)
        return null;
      const box = slugTargetElement.getBoundingClientRect();
      const id2 = slugTargetElement.id;
      const level2 = Number(element.tagName[1]);
      const text = element.textContent;
      const topOffset = window.scrollY + box.top;
      if (level2 < minLevel || level2 > maxLevel)
        return null;
      return {
        id: id2,
        level: level2,
        slugTargetElement,
        text,
        topOffset
      };
    }).filter(Boolean);
  }, [headingElements, maxLevel, minLevel]);
  const [activeId, setActiveId] = useState(hash.replace("#", ""));
  useEffect(() => {
    if (typeof window === "undefined")
      return;
    const observer = new IntersectionObserver(([entry]) => {
      var _a;
      if (!active.current)
        return;
      const id2 = entry.target.id;
      if (entry.isIntersecting)
        setActiveId(id2);
      else {
        const box = entry.target.getBoundingClientRect();
        const isVisible = box.top > 0;
        if (!isVisible)
          return;
        const activeIndex = items2.findIndex((item2) => item2.id === activeId);
        const previousId = (_a = items2[activeIndex - 1]) == null ? void 0 : _a.id;
        setActiveId(previousId);
      }
    }, {
      rootMargin: "0px 0px -95% 0px"
    });
    for (const item2 of items2)
      observer.observe(item2.slugTargetElement);
    return () => observer.disconnect();
  }, [activeId, items2]);
  useEffect(() => {
    if (typeof window === "undefined")
      return;
    const observer = new IntersectionObserver(([entry]) => {
      var _a;
      if (!active.current)
        return;
      const lastItemId = (_a = items2[items2.length - 1]) == null ? void 0 : _a.id;
      if (entry.isIntersecting)
        setActiveId(lastItemId);
      else if (activeId === lastItemId)
        setActiveId(items2[items2.length - 2].id);
    });
    observer.observe(document.querySelector("[data-bottom-observer]"));
    return () => observer.disconnect();
  }, [activeId, items2]);
  useEffect(() => {
    if (typeof window === "undefined")
      return;
    const callback = debounce(() => {
      var _a, _b, _c;
      if (!active.current)
        return;
      if (window.scrollY === 0) {
        setActiveId((_a = items2[0]) == null ? void 0 : _a.id);
        return;
      }
      if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {
        setActiveId((_b = items2[items2.length - 1]) == null ? void 0 : _b.id);
        return;
      }
      for (let i = 0; i < items2.length; i++) {
        const item2 = items2[i];
        if (window.scrollY < item2.topOffset) {
          setActiveId((_c = items2[i - 1]) == null ? void 0 : _c.id);
          break;
        }
      }
    }, 100);
    window.addEventListener("scroll", callback);
    return () => window.removeEventListener("scroll", callback);
  }, [items2]);
  if (items2.length === 0)
    return null;
  const levelItems = items2.filter((item2) => item2.level === minLevel);
  return jsxs("aside", { className: root$K, children: [jsxs("nav", { className: nav, children: [showTitle && jsx("h2", { className: heading, children: "On this page" }), jsx(Items, { activeId: highlightActive ? activeId : null, items: items2, onClickItem: () => {
    onClickItem == null ? void 0 : onClickItem();
    active.current = false;
    setTimeout(() => {
      active.current = true;
    }, 500);
  }, levelItems, setActiveId })] }), deserializeElement(outlineFooter)] });
}
function Items({ activeId, items: items2, levelItems, onClickItem, setActiveId }) {
  return jsx("ul", { className: items$1, children: levelItems.map(({ id: id2, level: level2, text }) => {
    const hash = `#${id2}`;
    const isActive = activeId === id2;
    const nextLevelItems = (() => {
      var _a;
      const itemIndex = items2.findIndex((item2) => item2.id === id2);
      const nextIndex = itemIndex + 1;
      const nextItemLevel = (_a = items2[nextIndex]) == null ? void 0 : _a.level;
      if (nextItemLevel <= level2)
        return null;
      const nextItems = [];
      for (let i = nextIndex; i < items2.length; i++) {
        const item2 = items2[i];
        if (item2.level !== nextItemLevel)
          break;
        nextItems.push(item2);
      }
      return nextItems;
    })();
    return jsxs(Fragment, { children: [jsx("li", { className: item$1, children: jsx(Link$2, { "data-active": isActive, to: hash, onClick: () => {
      onClickItem == null ? void 0 : onClickItem();
      setActiveId(id2);
    }, className: link$1, children: text }) }), nextLevelItems && jsx(Items, { activeId, levelItems: nextLevelItems, items: items2, onClickItem, setActiveId })] }, id2);
  }) });
}
var root$J = "vocs_Popover";
Popover.Root = Popover_.Root;
Popover.Trigger = Popover_.Trigger;
function Popover({ children, className }) {
  return jsx(Popover_.Portal, { children: jsx(Popover_.Content, { className: clsx$1(root$J, className), sideOffset: 12, children }) });
}
var root$I = "vocs_Sidebar";
var backLink = "vocs_Sidebar_backLink";
var divider$1 = "vocs_Sidebar_divider";
var navigation = "vocs_Sidebar_navigation";
var group = "vocs_Sidebar_group";
var logo = "vocs_Sidebar_logo";
var logoWrapper = "vocs_Sidebar_logoWrapper";
var section = "vocs_Sidebar_section";
var level = "vocs_Sidebar_level";
var levelCollapsed = "vocs_Sidebar_levelCollapsed";
var levelInset = "vocs_Sidebar_levelInset";
var footer = "vocs_Sidebar_footer";
var footerContent = "vocs_Sidebar_footerContent";
var footerCurtain = "vocs_Sidebar_footerCurtain";
var items = "vocs_Sidebar_items";
var item = "vocs_Sidebar_item";
var disabledItem = "vocs_Sidebar_disabledItem";
var sectionHeader = "vocs_Sidebar_sectionHeader";
var sectionHeaderActive = "vocs_Sidebar_sectionHeaderActive";
var sectionTitle = "vocs_Sidebar_sectionTitle";
var sectionTitleLink = "vocs_Sidebar_sectionTitleLink";
var sectionCollapse = "vocs_Sidebar_sectionCollapse";
var sectionCollapseActive = "vocs_Sidebar_sectionCollapseActive";
function useTheme() {
  const [theme, setTheme] = useState(() => {
    if (typeof window === "undefined")
      return void 0;
    if (localStorage.getItem("vocs.theme")) {
      const storedTheme = localStorage.getItem("vocs.theme");
      if (storedTheme)
        return storedTheme;
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  });
  useEffect(() => {
    if (theme)
      localStorage.setItem("vocs.theme", theme);
    if (theme === "dark")
      document.documentElement.classList.add("dark");
    else
      document.documentElement.classList.remove("dark");
  }, [theme]);
  return {
    setTheme,
    theme,
    toggle() {
      setTheme((theme2) => theme2 === "light" ? "dark" : "light");
    }
  };
}
var root$H = "vocs_ThemeToggle";
var themeToggleButton = "vocs_ThemeToggle_themeToggleButton";
function Moon() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Moon" }), jsx("path", { d: "M2.89998 0.499976C2.89998 0.279062 2.72089 0.0999756 2.49998 0.0999756C2.27906 0.0999756 2.09998 0.279062 2.09998 0.499976V1.09998H1.49998C1.27906 1.09998 1.09998 1.27906 1.09998 1.49998C1.09998 1.72089 1.27906 1.89998 1.49998 1.89998H2.09998V2.49998C2.09998 2.72089 2.27906 2.89998 2.49998 2.89998C2.72089 2.89998 2.89998 2.72089 2.89998 2.49998V1.89998H3.49998C3.72089 1.89998 3.89998 1.72089 3.89998 1.49998C3.89998 1.27906 3.72089 1.09998 3.49998 1.09998H2.89998V0.499976ZM5.89998 3.49998C5.89998 3.27906 5.72089 3.09998 5.49998 3.09998C5.27906 3.09998 5.09998 3.27906 5.09998 3.49998V4.09998H4.49998C4.27906 4.09998 4.09998 4.27906 4.09998 4.49998C4.09998 4.72089 4.27906 4.89998 4.49998 4.89998H5.09998V5.49998C5.09998 5.72089 5.27906 5.89998 5.49998 5.89998C5.72089 5.89998 5.89998 5.72089 5.89998 5.49998V4.89998H6.49998C6.72089 4.89998 6.89998 4.72089 6.89998 4.49998C6.89998 4.27906 6.72089 4.09998 6.49998 4.09998H5.89998V3.49998ZM1.89998 6.49998C1.89998 6.27906 1.72089 6.09998 1.49998 6.09998C1.27906 6.09998 1.09998 6.27906 1.09998 6.49998V7.09998H0.499976C0.279062 7.09998 0.0999756 7.27906 0.0999756 7.49998C0.0999756 7.72089 0.279062 7.89998 0.499976 7.89998H1.09998V8.49998C1.09998 8.72089 1.27906 8.89997 1.49998 8.89997C1.72089 8.89997 1.89998 8.72089 1.89998 8.49998V7.89998H2.49998C2.72089 7.89998 2.89998 7.72089 2.89998 7.49998C2.89998 7.27906 2.72089 7.09998 2.49998 7.09998H1.89998V6.49998ZM8.54406 0.98184L8.24618 0.941586C8.03275 0.917676 7.90692 1.1655 8.02936 1.34194C8.17013 1.54479 8.29981 1.75592 8.41754 1.97445C8.91878 2.90485 9.20322 3.96932 9.20322 5.10022C9.20322 8.37201 6.82247 11.0878 3.69887 11.6097C3.45736 11.65 3.20988 11.6772 2.96008 11.6906C2.74563 11.702 2.62729 11.9535 2.77721 12.1072C2.84551 12.1773 2.91535 12.2458 2.98667 12.3128L3.05883 12.3795L3.31883 12.6045L3.50684 12.7532L3.62796 12.8433L3.81491 12.9742L3.99079 13.089C4.11175 13.1651 4.23536 13.2375 4.36157 13.3059L4.62496 13.4412L4.88553 13.5607L5.18837 13.6828L5.43169 13.7686C5.56564 13.8128 5.70149 13.8529 5.83857 13.8885C5.94262 13.9155 6.04767 13.9401 6.15405 13.9622C6.27993 13.9883 6.40713 14.0109 6.53544 14.0298L6.85241 14.0685L7.11934 14.0892C7.24637 14.0965 7.37436 14.1002 7.50322 14.1002C11.1483 14.1002 14.1032 11.1453 14.1032 7.50023C14.1032 7.25044 14.0893 7.00389 14.0623 6.76131L14.0255 6.48407C13.991 6.26083 13.9453 6.04129 13.8891 5.82642C13.8213 5.56709 13.7382 5.31398 13.6409 5.06881L13.5279 4.80132L13.4507 4.63542L13.3766 4.48666C13.2178 4.17773 13.0353 3.88295 12.8312 3.60423L12.6782 3.40352L12.4793 3.16432L12.3157 2.98361L12.1961 2.85951L12.0355 2.70246L11.8134 2.50184L11.4925 2.24191L11.2483 2.06498L10.9562 1.87446L10.6346 1.68894L10.3073 1.52378L10.1938 1.47176L9.95488 1.3706L9.67791 1.2669L9.42566 1.1846L9.10075 1.09489L8.83599 1.03486L8.54406 0.98184ZM10.4032 5.30023C10.4032 4.27588 10.2002 3.29829 9.83244 2.40604C11.7623 3.28995 13.1032 5.23862 13.1032 7.50023C13.1032 10.593 10.596 13.1002 7.50322 13.1002C6.63646 13.1002 5.81597 12.9036 5.08355 12.5522C6.5419 12.0941 7.81081 11.2082 8.74322 10.0416C8.87963 10.2284 9.10028 10.3497 9.34928 10.3497C9.76349 10.3497 10.0993 10.0139 10.0993 9.59971C10.0993 9.24256 9.84965 8.94373 9.51535 8.86816C9.57741 8.75165 9.63653 8.63334 9.6926 8.51332C9.88358 8.63163 10.1088 8.69993 10.35 8.69993C11.0403 8.69993 11.6 8.14028 11.6 7.44993C11.6 6.75976 11.0406 6.20024 10.3505 6.19993C10.3853 5.90487 10.4032 5.60464 10.4032 5.30023Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function Sun() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", children: [jsx("title", { children: "Sun" }), jsx("path", { d: "M7.5 0C7.77614 0 8 0.223858 8 0.5V2.5C8 2.77614 7.77614 3 7.5 3C7.22386 3 7 2.77614 7 2.5V0.5C7 0.223858 7.22386 0 7.5 0ZM2.1967 2.1967C2.39196 2.00144 2.70854 2.00144 2.90381 2.1967L4.31802 3.61091C4.51328 3.80617 4.51328 4.12276 4.31802 4.31802C4.12276 4.51328 3.80617 4.51328 3.61091 4.31802L2.1967 2.90381C2.00144 2.70854 2.00144 2.39196 2.1967 2.1967ZM0.5 7C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H2.5C2.77614 8 3 7.77614 3 7.5C3 7.22386 2.77614 7 2.5 7H0.5ZM2.1967 12.8033C2.00144 12.608 2.00144 12.2915 2.1967 12.0962L3.61091 10.682C3.80617 10.4867 4.12276 10.4867 4.31802 10.682C4.51328 10.8772 4.51328 11.1938 4.31802 11.3891L2.90381 12.8033C2.70854 12.9986 2.39196 12.9986 2.1967 12.8033ZM12.5 7C12.2239 7 12 7.22386 12 7.5C12 7.77614 12.2239 8 12.5 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12.5ZM10.682 4.31802C10.4867 4.12276 10.4867 3.80617 10.682 3.61091L12.0962 2.1967C12.2915 2.00144 12.608 2.00144 12.8033 2.1967C12.9986 2.39196 12.9986 2.70854 12.8033 2.90381L11.3891 4.31802C11.1938 4.51328 10.8772 4.51328 10.682 4.31802ZM8 12.5C8 12.2239 7.77614 12 7.5 12C7.22386 12 7 12.2239 7 12.5V14.5C7 14.7761 7.22386 15 7.5 15C7.77614 15 8 14.7761 8 14.5V12.5ZM10.682 10.682C10.8772 10.4867 11.1938 10.4867 11.3891 10.682L12.8033 12.0962C12.9986 12.2915 12.9986 12.608 12.8033 12.8033C12.608 12.9986 12.2915 12.9986 12.0962 12.8033L10.682 11.3891C10.4867 11.1938 10.4867 10.8772 10.682 10.682ZM5.5 7.5C5.5 6.39543 6.39543 5.5 7.5 5.5C8.60457 5.5 9.5 6.39543 9.5 7.5C9.5 8.60457 8.60457 9.5 7.5 9.5C6.39543 9.5 5.5 8.60457 5.5 7.5ZM7.5 4.5C5.84315 4.5 4.5 5.84315 4.5 7.5C4.5 9.15685 5.84315 10.5 7.5 10.5C9.15685 10.5 10.5 9.15685 10.5 7.5C10.5 5.84315 9.15685 4.5 7.5 4.5Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function ThemeToggle() {
  const { theme, setTheme } = useTheme();
  const mounted = useMounted();
  if (!mounted)
    return null;
  if (!theme)
    return null;
  return jsxs("div", { className: root$H, children: [jsx("button", { "data-active": theme === "light", type: "button", className: themeToggleButton, onClick: () => setTheme("light"), children: jsx(Icon, { label: "Light Mode", icon: Sun, size: "16px" }) }), jsx("button", { "data-active": theme === "dark", type: "button", className: themeToggleButton, onClick: () => setTheme("dark"), children: jsx(Icon, { label: "Dark Mode", icon: Moon, size: "16px" }) })] });
}
function ChevronRight() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Chevron Right" }), jsx("path", { d: "M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function Sidebar(props) {
  var _a;
  const { className, onClickItem } = props;
  const { previousPath } = usePageData();
  const sidebarRef = useRef(null);
  const sidebar2 = useSidebar();
  const [backPath, setBackPath] = useState("/");
  useEffect(() => {
    if (typeof window === "undefined")
      return;
    if (!previousPath)
      return;
    setBackPath(previousPath);
  }, [sidebar2.key, sidebar2.backLink]);
  if (!sidebar2)
    return null;
  const groups = getSidebarGroups(sidebar2.items);
  return jsxs("aside", { ref: sidebarRef, className: clsx$1(root$I, className), children: [jsxs("div", { children: [jsxs("div", { className: logoWrapper, children: [jsx("div", { className: logo, children: jsx(RouterLink, { to: "/", style: { alignItems: "center", display: "flex", height: "100%" }, children: jsx(NavLogo, {}) }) }), jsx("div", { className: divider$1 })] }), jsx("nav", { className: navigation, children: jsxs("div", { className: group, children: [sidebar2.backLink && jsx("section", { className: section, children: jsx("div", { className: items, children: jsxs(RouterLink, { className: clsx$1(item, backLink), to: backPath, children: ["←", " ", typeof history !== "undefined" && ((_a = history.state) == null ? void 0 : _a.key) && backPath !== "/" ? "Back" : "Home"] }) }) }), groups.map((group2, i) => jsx(SidebarItem, { depth: 0, item: group2, onClick: onClickItem, sidebarRef }, `${group2.text}${i}`))] }) })] }), jsxs("div", { className: footer, children: [jsx("div", { className: footerCurtain }), jsxs("div", { className: footerContent, children: [jsx(Socials, {}), jsx(ThemeToggle, {})] })] })] }, sidebar2.key);
}
function getSidebarGroups(sidebar2) {
  const groups = [];
  let lastGroupIndex = 0;
  for (const item2 of sidebar2) {
    if (item2.items) {
      lastGroupIndex = groups.push(item2);
      continue;
    }
    if (!groups[lastGroupIndex])
      groups.push({ text: "", items: [item2] });
    else
      groups[lastGroupIndex].items.push(item2);
  }
  return groups;
}
function getActiveChildItem(items2, pathname) {
  return items2.find((item2) => {
    if (matchPath(pathname, item2.link ?? ""))
      return true;
    if (item2.link === pathname)
      return true;
    if (!item2.items)
      return false;
    return getActiveChildItem(item2.items, pathname);
  });
}
function SidebarItem(props) {
  const { depth, item: item$12, onClick, sidebarRef } = props;
  const itemRef = useRef(null);
  const { pathname } = useLocation();
  const match = useMatch(item$12.link || "");
  const hasActiveChildItem = useMemo(() => item$12.items ? Boolean(getActiveChildItem(item$12.items, pathname)) : false, [item$12.items, pathname]);
  const [collapsed, setCollapsed] = useState(() => {
    if (item$12.link && match)
      return false;
    if (!item$12.items)
      return false;
    if (hasActiveChildItem)
      return false;
    return Boolean(item$12.collapsed);
  });
  const isCollapsable = item$12.collapsed !== void 0 && item$12.items !== void 0;
  const onCollapseInteraction = useCallback((event) => {
    if ("key" in event && event.key !== "Enter")
      return;
    setCollapsed((x) => !x);
  }, []);
  const onCollapseTriggerInteraction = useCallback((event) => {
    if ("key" in event && event.key !== "Enter")
      return;
    setCollapsed((x) => !x);
  }, []);
  const active = useRef(true);
  useEffect(() => {
    if (!active.current)
      return;
    active.current = false;
    const match2 = matchPath(pathname, item$12.link ?? "");
    if (!match2)
      return;
    requestAnimationFrame(() => {
      var _a, _b, _c;
      const offsetTop = ((_a = itemRef.current) == null ? void 0 : _a.offsetTop) ?? 0;
      const sidebarHeight = ((_b = sidebarRef == null ? void 0 : sidebarRef.current) == null ? void 0 : _b.clientHeight) ?? 0;
      if (offsetTop < sidebarHeight)
        return;
      (_c = sidebarRef == null ? void 0 : sidebarRef.current) == null ? void 0 : _c.scrollTo({ top: offsetTop - 100 });
    });
  }, [item$12, pathname, sidebarRef]);
  if (item$12.items)
    return jsxs("section", { ref: itemRef, className: clsx$1(section, depth === 0 && item$12.text && level, depth === 0 && item$12.text && collapsed && levelCollapsed), children: [item$12.text && jsxs("div", { className: sectionHeader, ...isCollapsable && !item$12.link ? {
      role: "button",
      tabIndex: 0,
      onClick: onCollapseInteraction,
      onKeyDown: onCollapseInteraction
    } : {}, children: [item$12.text && (item$12.link ? jsx(Link$1, { "data-active": Boolean(match), onClick: (e) => {
      onClick == null ? void 0 : onClick(e);
      onCollapseInteraction(e);
    }, className: clsx$1(depth === 0 ? [sectionTitle, sectionTitleLink] : item, hasActiveChildItem && sectionHeaderActive, item$12.disabled && disabledItem), href: item$12.link, variant: "styleless", children: item$12.text }) : jsx("div", { className: clsx$1(depth === 0 ? sectionTitle : item, item$12.disabled && disabledItem), children: item$12.text })), isCollapsable && jsx("div", {
      // biome-ignore lint/a11y/useSemanticElements:
      role: "button",
      tabIndex: 0,
      onClick: onCollapseTriggerInteraction,
      onKeyDown: onCollapseTriggerInteraction,
      children: jsx(Icon, { className: clsx$1(sectionCollapse, collapsed && sectionCollapseActive), label: "toggle section", icon: ChevronRight, size: "16px" })
    })] }), !collapsed && jsx("div", { className: clsx$1(items, depth !== 0 && levelInset), children: item$12.items && item$12.items.length > 0 && depth < 5 && item$12.items.map((item2, i) => jsx(SidebarItem, { depth: depth + 1, item: item2, onClick, sidebarRef }, `${item2.text}${i}`)) })] });
  return jsx(Fragment$1, { children: item$12.link ? jsx(Link$1, { ref: itemRef, "data-active": Boolean(match), onClick, className: clsx$1(item, item$12.disabled && disabledItem), href: item$12.link, variant: "styleless", children: item$12.text }) : jsx("div", { className: clsx$1(item, item$12.disabled && disabledItem), children: item$12.text }) });
}
function ChevronDown() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Chevron Down" }), jsx("path", { d: "M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function ChevronUp() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Chevron Up" }), jsx("path", { d: "M3.13523 8.84197C3.3241 9.04343 3.64052 9.05363 3.84197 8.86477L7.5 5.43536L11.158 8.86477C11.3595 9.05363 11.6759 9.04343 11.8648 8.84197C12.0536 8.64051 12.0434 8.32409 11.842 8.13523L7.84197 4.38523C7.64964 4.20492 7.35036 4.20492 7.15803 4.38523L3.15803 8.13523C2.95657 8.32409 2.94637 8.64051 3.13523 8.84197Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function Menu() {
  return jsxs("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 79 48", fill: "none", children: [jsx("title", { children: "Menu" }), jsx("path", { fill: "currentColor", d: "M19.528 47.232h40.87c1.952 0 3.515-1.562 3.515-3.564a3.5 3.5 0 0 0-3.516-3.516H19.528a3.501 3.501 0 0 0-3.515 3.516c0 2.002 1.562 3.564 3.515 3.564ZM12.057 27.262h55.81a3.501 3.501 0 0 0 3.516-3.516 3.501 3.501 0 0 0-3.515-3.515h-55.81a3.501 3.501 0 0 0-3.516 3.515 3.501 3.501 0 0 0 3.515 3.516ZM4.391 7.34H75.29c2.002 0 3.515-1.563 3.515-3.516 0-2.002-1.513-3.564-3.515-3.564H4.39C2.438.26.876 1.822.876 3.824A3.501 3.501 0 0 0 4.39 7.34Z" })] });
}
MobileTopNav.Curtain = Curtain;
function MobileTopNav() {
  const config2 = useConfig();
  const { showLogo } = useLayout();
  return jsxs("div", { className: root$L, children: [jsxs("div", { className: section$1, children: [showLogo && jsx("div", { className: group$1, children: jsx("div", { className: logo$1, children: jsx(RouterLink, { to: "/", style: { alignItems: "center", display: "flex", height: "100%" }, children: jsx(NavLogo, {}) }) }) }), config2.topNav && jsxs("div", { className: group$1, children: [jsx(Navigation, { items: config2.topNav }), jsx(CompactNavigation, { items: config2.topNav })] })] }), jsx("div", { className: section$1, children: jsx("div", { className: group$1, style: { marginRight: "-8px" }, children: jsx(MobileSearch, {}) }) })] });
}
function Navigation({ items: items2 }) {
  const { pathname } = useLocation();
  const activeIds = useActiveNavIds({ pathname, items: items2 });
  return jsx(Root$2, { className: navigation$1, children: jsxs(List$2, { children: [items2.map((item2, i) => {
    if (item2.element)
      return deserializeElement(item2.element);
    if (item2.link) {
      return jsx(Link, { active: activeIds == null ? void 0 : activeIds.includes(item2.id), href: item2.link, children: item2.text }, i);
    }
    return jsxs(Item, { className: item$2, children: [jsx(Trigger$1, { active: activeIds == null ? void 0 : activeIds.includes(item2.id), children: item2.text }), jsx(Content$1, { className: content$4, children: jsx(NavigationMenuContent, { items: item2.items || [] }) })] }, i);
  }), jsx(TopNavEnd, {})] }) });
}
function NavigationMenuContent({ items: items2 }) {
  const { pathname } = useLocation();
  const activeIds = useActiveNavIds({ pathname, items: items2 });
  return jsx("ul", { children: items2 == null ? void 0 : items2.map((item2, i) => jsx(Link, { active: activeIds.includes(item2.id), href: item2.link, children: item2.text }, i)) });
}
function CompactNavigation({ items: items2 }) {
  const [showPopover, setShowPopover] = useState(false);
  const { showSidebar } = useLayout();
  const { pathname } = useLocation();
  const activeIds = useActiveNavIds({ pathname, items: items2 });
  const activeItem = items2.filter((item2) => item2.id === activeIds[0])[0];
  const { basePath } = useConfig();
  const assetBasePath = basePath;
  return jsx("div", { className: clsx$1(navigation$1, navigation_compact), children: jsxs(Popover.Root, { modal: true, open: showPopover, onOpenChange: setShowPopover, children: [jsx(Popover.Trigger, { className: clsx$1(menuTrigger, navigationItem), children: showSidebar || activeItem ? jsxs(Fragment$1, { children: [(activeItem == null ? void 0 : activeItem.text) ?? "Menu", jsx(Icon, { label: "Menu", icon: ChevronDown, size: "16px" })] }) : jsx(Icon, { label: "Menu", icon: Menu, size: "16px" }) }), jsxs(Popover, { className: topNavPopover, children: [jsxs(Accordion.Root, { type: "single", collapsible: true, style: { display: "flex", flexDirection: "column" }, children: [items2.map((item2, i) => {
    var _a;
    if (item2.element)
      return deserializeElement(item2.element);
    if (item2.link) {
      return jsx(Link$1, { "data-active": activeIds.includes(item2.id), className: navigationItem, href: item2.link, onClick: () => setShowPopover(false), variant: "styleless", children: item2.text }, i);
    }
    return jsxs(Accordion.Item, { value: i.toString(), children: [jsx(Accordion.Trigger, { className: clsx$1(navigationItem, navigationTrigger), "data-active": activeIds.includes(item2.id), style: assignInlineVars({
      [chevronDownIcon]: `url(${assetBasePath}/.vocs/icons/chevron-down.svg)`,
      [chevronUpIcon]: `url(${assetBasePath}/.vocs/icons/chevron-up.svg)`
    }), children: item2.text }), jsx(Accordion.Content, { className: navigationContent, children: (_a = item2.items) == null ? void 0 : _a.map((item22, i2) => jsx(Link$1, { className: navigationItem, href: item22.link, onClick: () => setShowPopover(false), variant: "styleless", children: item22.text }, i2)) })] }, i);
  }), jsx(TopNavEnd, {})] }), jsxs("div", { className: topNavPopoverFooter, children: [jsx(Socials, {}), jsx(ThemeToggle, {})] })] })] }) });
}
function Curtain({ enableScrollToTop }) {
  const { pathname } = useLocation();
  const { layout, showSidebar } = useLayout();
  const { frontmatter = {} } = usePageData();
  const sidebar2 = useSidebar();
  const [isOutlineOpen, setOutlineOpen] = useState(false);
  const [isSidebarOpen, setSidebarOpen] = useState(false);
  const sidebarItemTitle = useMemo(() => {
    if (!sidebar2 || layout === "minimal")
      return;
    const sidebarItem = getSidebarItemFromPathname({
      sidebarItems: sidebar2.items,
      pathname
    });
    return sidebarItem == null ? void 0 : sidebarItem.text;
  }, [layout, pathname, sidebar2]);
  const contentTitle = useMemo(() => {
    var _a;
    if (typeof window === "undefined")
      return;
    return (_a = document.querySelector(".vocs_Content h1")) == null ? void 0 : _a.textContent;
  }, []);
  const title2 = sidebarItemTitle || frontmatter.title || contentTitle;
  return jsxs("div", { className: curtain, children: [jsx("div", { className: curtainGroup, children: jsx("div", { className: curtainItem, children: showSidebar ? jsxs(Popover.Root, { modal: true, open: isSidebarOpen, onOpenChange: setSidebarOpen, children: [jsxs(Popover.Trigger, { className: menuTrigger, children: [jsx(Icon, { label: "Menu", icon: Menu, size: "13px" }), jsx("div", { className: menuTitle, children: title2 })] }), jsx(Popover, { className: sidebarPopover, children: jsx(Sidebar, { onClickItem: () => setSidebarOpen(false) }) })] }) : title2 }) }), jsxs("div", { className: curtainGroup, children: [enableScrollToTop && jsxs(Fragment$1, { children: [jsx("div", { className: curtainItem, children: jsxs("button", { className: outlineTrigger, onClick: () => window.scrollTo({ behavior: "smooth", top: 0 }), type: "button", children: ["Top", jsx(Icon, { label: "Scroll to top", icon: ChevronUp, size: "16px" })] }) }), jsx("div", { className: separator$1 })] }), layout === "docs" && jsx("div", { className: curtainItem, children: jsxs(Popover.Root, { modal: true, open: isOutlineOpen, onOpenChange: setOutlineOpen, children: [jsxs(Popover.Trigger, { className: outlineTrigger, children: ["On this page", jsx(Icon, { label: "On this page", icon: ChevronRight, size: "16px" })] }), jsx(Popover, { className: outlinePopover, children: jsx(Outline, { onClickItem: () => setOutlineOpen(false), showTitle: false }) })] }) })] })] });
}
function getSidebarItemFromPathname({ sidebarItems, pathname: pathname_ }) {
  const pathname = pathname_.replace(/(.+)\/$/, "$1");
  for (const item2 of sidebarItems) {
    if ((item2 == null ? void 0 : item2.link) === pathname)
      return item2;
    if (item2.items) {
      const childItem = getSidebarItemFromPathname({ sidebarItems: item2.items, pathname });
      if (childItem)
        return childItem;
    }
  }
  return void 0;
}
var root$G = "vocs_SkipLink";
const skipLinkId = "vocs-content";
function SkipLink() {
  const { pathname } = useLocation();
  return jsx("a", { className: clsx$1(root$G, visuallyHidden), href: `${pathname}#${skipLinkId}`, children: "Skip to content" });
}
var root$F = "vocs_DocsLayout";
var content$3 = "vocs_DocsLayout_content";
var content_withTopNav = "vocs_DocsLayout_content_withTopNav";
var content_withSidebar = "vocs_DocsLayout_content_withSidebar";
var gutterLeft = "vocs_DocsLayout_gutterLeft";
var gutterTop = "vocs_DocsLayout_gutterTop";
var gutterTop_offsetLeftGutter = "vocs_DocsLayout_gutterTop_offsetLeftGutter";
var gutterTop_sticky = "vocs_DocsLayout_gutterTop_sticky";
var gutterTopCurtain = "vocs_DocsLayout_gutterTopCurtain";
var gutterTopCurtain_hidden = "vocs_DocsLayout_gutterTopCurtain_hidden";
var gutterTopCurtain_withSidebar = "vocs_DocsLayout_gutterTopCurtain_withSidebar";
var gutterRight = "vocs_DocsLayout_gutterRight";
var gutterRight_withSidebar = "vocs_DocsLayout_gutterRight_withSidebar";
var sidebar = "vocs_DocsLayout_sidebar";
function DocsLayout({ children }) {
  var _a, _b;
  const { banner, font } = useConfig();
  const { frontmatter = {} } = usePageData();
  const { content: content2 } = frontmatter;
  const { layout, showOutline, showSidebar, showTopNav } = useLayout();
  const { ref, inView } = useInView({
    initialInView: true,
    rootMargin: "100px 0px 0px 0px"
  });
  const [showBanner, setShowBanner] = useLocalStorage("banner", true);
  return jsxs("div", { className: root$F, "data-layout": layout, style: assignInlineVars({
    [bannerHeight]: showBanner ? banner == null ? void 0 : banner.height : void 0,
    [fontFamilyVars.default]: ((_a = font == null ? void 0 : font.default) == null ? void 0 : _a.google) ? `${font.default.google}, ${defaultFontFamily.default}` : void 0,
    [fontFamilyVars.mono]: ((_b = font == null ? void 0 : font.mono) == null ? void 0 : _b.google) ? `${font.mono.google}, ${defaultFontFamily.mono}` : void 0
  }), children: [jsx(SkipLink, {}), showBanner && jsx(Banner, { hide: () => setShowBanner(false) }), showSidebar && jsx("div", { className: gutterLeft, children: jsx(Sidebar, { className: sidebar }) }), showTopNav && jsxs(Fragment$1, { children: [jsxs("div", { ref, className: clsx$1(gutterTop, showSidebar && gutterTop_offsetLeftGutter, (layout === "minimal" || layout === "landing") && gutterTop_sticky), children: [jsx(DesktopTopNav, {}), jsx(MobileTopNav, {})] }), jsxs("div", { className: clsx$1(gutterTopCurtain, showSidebar && gutterTopCurtain_withSidebar, (layout === "minimal" || layout === "landing") && gutterTopCurtain_hidden), children: [jsx(DesktopTopNav.Curtain, {}), jsx(MobileTopNav.Curtain, { enableScrollToTop: !inView })] })] }), showOutline && jsx("div", { className: clsx$1(gutterRight, showSidebar && gutterRight_withSidebar), children: jsx(Outline, {}) }), jsxs("div", { id: skipLinkId, className: clsx$1(content$3, showSidebar && content_withSidebar, showTopNav && content_withTopNav), style: assignInlineVars({
    [contentVars.horizontalPadding]: content2 == null ? void 0 : content2.horizontalPadding,
    [contentVars.width]: content2 == null ? void 0 : content2.width,
    [contentVars.verticalPadding]: content2 == null ? void 0 : content2.verticalPadding
  }), children: [jsx(Content$2, { children }), jsx(Footer, {})] }), jsx("div", { "data-bottom-observer": true })] });
}
var root$E = "vocs_Anchor";
var root$D = "vocs_Autolink";
function Autolink(props) {
  if (!props.href)
    return null;
  return jsx(Link$2, { ...props, className: clsx(props.className, root$D), to: props.href });
}
function Anchor(props) {
  const { children, href } = props;
  const { pathname } = useLocation();
  if (children && typeof children === "object" && "props" in children && children.props["data-autolink-icon"])
    return jsx(Autolink, { className: clsx(props.className, root$E), ...props });
  if (href == null ? void 0 : href.match(/^#/))
    return jsx("a", { className: clsx(props.className, root$E), ...props, href: `${pathname}${href}` });
  return jsx(Link$1, { className: clsx(props.className, root$E), ...props, hideExternalIcon: true });
}
var root$C = "vocs_Callout";
var content$2 = "vocs_Callout_content";
var icon = "vocs_Callout_icon";
var note = "vocs_Callout_note";
var info = "vocs_Callout_info";
var warning = "vocs_Callout_warning";
var danger = "vocs_Callout_danger";
var tip = "vocs_Callout_tip";
var success = "vocs_Callout_success";
const styles = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  content: content$2,
  danger,
  icon,
  info,
  note,
  root: root$C,
  success,
  tip,
  warning
}, Symbol.toStringTag, { value: "Module" }));
function CheckCircle() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Check" }), jsx("path", { d: "M7.49991 0.877045C3.84222 0.877045 0.877075 3.84219 0.877075 7.49988C0.877075 11.1575 3.84222 14.1227 7.49991 14.1227C11.1576 14.1227 14.1227 11.1575 14.1227 7.49988C14.1227 3.84219 11.1576 0.877045 7.49991 0.877045ZM1.82708 7.49988C1.82708 4.36686 4.36689 1.82704 7.49991 1.82704C10.6329 1.82704 13.1727 4.36686 13.1727 7.49988C13.1727 10.6329 10.6329 13.1727 7.49991 13.1727C4.36689 13.1727 1.82708 10.6329 1.82708 7.49988ZM10.1589 5.53774C10.3178 5.31191 10.2636 5.00001 10.0378 4.84109C9.81194 4.68217 9.50004 4.73642 9.34112 4.96225L6.51977 8.97154L5.35681 7.78706C5.16334 7.59002 4.84677 7.58711 4.64973 7.78058C4.45268 7.97404 4.44978 8.29061 4.64325 8.48765L6.22658 10.1003C6.33054 10.2062 6.47617 10.2604 6.62407 10.2483C6.77197 10.2363 6.90686 10.1591 6.99226 10.0377L10.1589 5.53774Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function ExclamationTriangle() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Exclamation" }), jsx("path", { d: "M8.4449 0.608765C8.0183 -0.107015 6.9817 -0.107015 6.55509 0.608766L0.161178 11.3368C-0.275824 12.07 0.252503 13 1.10608 13H13.8939C14.7475 13 15.2758 12.07 14.8388 11.3368L8.4449 0.608765ZM7.4141 1.12073C7.45288 1.05566 7.54712 1.05566 7.5859 1.12073L13.9798 11.8488C14.0196 11.9154 13.9715 12 13.8939 12H1.10608C1.02849 12 0.980454 11.9154 1.02018 11.8488L7.4141 1.12073ZM6.8269 4.48611C6.81221 4.10423 7.11783 3.78663 7.5 3.78663C7.88217 3.78663 8.18778 4.10423 8.1731 4.48612L8.01921 8.48701C8.00848 8.766 7.7792 8.98664 7.5 8.98664C7.2208 8.98664 6.99151 8.766 6.98078 8.48701L6.8269 4.48611ZM8.24989 10.476C8.24989 10.8902 7.9141 11.226 7.49989 11.226C7.08567 11.226 6.74989 10.8902 6.74989 10.476C6.74989 10.0618 7.08567 9.72599 7.49989 9.72599C7.9141 9.72599 8.24989 10.0618 8.24989 10.476Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function InfoCircled() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Info" }), jsx("path", { d: "M7.49991 0.876892C3.84222 0.876892 0.877075 3.84204 0.877075 7.49972C0.877075 11.1574 3.84222 14.1226 7.49991 14.1226C11.1576 14.1226 14.1227 11.1574 14.1227 7.49972C14.1227 3.84204 11.1576 0.876892 7.49991 0.876892ZM1.82707 7.49972C1.82707 4.36671 4.36689 1.82689 7.49991 1.82689C10.6329 1.82689 13.1727 4.36671 13.1727 7.49972C13.1727 10.6327 10.6329 13.1726 7.49991 13.1726C4.36689 13.1726 1.82707 10.6327 1.82707 7.49972ZM8.24992 4.49999C8.24992 4.9142 7.91413 5.24999 7.49992 5.24999C7.08571 5.24999 6.74992 4.9142 6.74992 4.49999C6.74992 4.08577 7.08571 3.74999 7.49992 3.74999C7.91413 3.74999 8.24992 4.08577 8.24992 4.49999ZM6.00003 5.99999H6.50003H7.50003C7.77618 5.99999 8.00003 6.22384 8.00003 6.49999V9.99999H8.50003H9.00003V11H8.50003H7.50003H6.50003H6.00003V9.99999H6.50003H7.00003V6.99999H6.50003H6.00003V5.99999Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function LightningBolt() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Lightning Bolt" }), jsx("path", { d: "M8.69667 0.0403541C8.90859 0.131038 9.03106 0.354857 8.99316 0.582235L8.0902 6.00001H12.5C12.6893 6.00001 12.8625 6.10701 12.9472 6.27641C13.0319 6.4458 13.0136 6.6485 12.8999 6.80001L6.89997 14.8C6.76167 14.9844 6.51521 15.0503 6.30328 14.9597C6.09135 14.869 5.96888 14.6452 6.00678 14.4178L6.90974 9H2.49999C2.31061 9 2.13748 8.893 2.05278 8.72361C1.96809 8.55422 1.98636 8.35151 2.09999 8.2L8.09997 0.200038C8.23828 0.0156255 8.48474 -0.0503301 8.69667 0.0403541ZM3.49999 8.00001H7.49997C7.64695 8.00001 7.78648 8.06467 7.88148 8.17682C7.97648 8.28896 8.01733 8.43723 7.99317 8.5822L7.33027 12.5596L11.5 7.00001H7.49997C7.353 7.00001 7.21347 6.93534 7.11846 6.8232C7.02346 6.71105 6.98261 6.56279 7.00678 6.41781L7.66968 2.44042L3.49999 8.00001Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function Callout({ className, children, type }) {
  return jsxs("aside", { className: clsx(className, root$C, styles[type]), children: [jsxs("div", { className: icon, children: [type === "note" && jsx(InfoCircled, {}), type === "info" && jsx(InfoCircled, {}), type === "warning" && jsx(ExclamationTriangle, {}), type === "danger" && jsx(ExclamationTriangle, {}), type === "tip" && jsx(LightningBolt, {}), type === "success" && jsx(CheckCircle, {})] }), jsx("div", { className: content$2, children })] });
}
var root$B = "vocs_Aside";
function Aside(props) {
  const className = clsx(props.className, root$B);
  if ("data-callout" in props)
    return jsx(Callout, { className, type: props["data-callout"], children: props.children });
  return jsx("aside", { ...props, className });
}
var root$A = "vocs_Blockquote";
function Blockquote(props) {
  return jsx("blockquote", { ...props, className: clsx(props.className, root$A) });
}
var root$z = "vocs_Code";
function Code(props) {
  const children = filterEmptyLines(props.children);
  return jsx("code", { ...props, className: clsx(props.className, root$z), children });
}
function filterEmptyLines(nodes) {
  if (!Array.isArray(nodes))
    return nodes;
  return nodes.map((child, index) => {
    var _a, _b, _c;
    return child.props && "data-line" in child.props && typeof child.props.children === "string" && child.props.children.trim() === "" && ((_c = (_b = (_a = nodes[index + 1]) == null ? void 0 : _a.props) == null ? void 0 : _b.className) == null ? void 0 : _c.includes("twoslash-tag-line")) ? null : child;
  }).filter(Boolean);
}
var root$y = "vocs_Details";
function Details(props) {
  return jsx("details", { ...props, className: clsx(props.className, root$y) });
}
var root$x = "vocs_Authors";
var authors = "vocs_Authors_authors";
var link = "vocs_Authors_link";
var separator = "vocs_Authors_separator";
function Authors(props) {
  const { frontmatter } = usePageData();
  const { authors: authors_ = frontmatter == null ? void 0 : frontmatter.authors, date = frontmatter == null ? void 0 : frontmatter.date } = props;
  const authors$1 = useMemo(() => {
    if (!authors_)
      return void 0;
    if (Array.isArray(authors_))
      return authors_;
    return authors_.split(",").map((author) => author.trim());
  }, [authors_]);
  const formattedDate = useMemo(() => {
    if (!date)
      return null;
    const dateObject = new Date(date);
    return dateObject.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric"
    });
  }, [date]);
  return jsxs("div", { className: root$x, children: [formattedDate, authors$1 && (formattedDate ? " by " : "By "), jsx("span", { className: authors, children: authors$1 == null ? void 0 : authors$1.map((author, index) => {
    const { text, url } = parseAuthor(author);
    return jsxs(Fragment, { children: [url ? jsx("a", { className: link, href: url, target: "_blank", rel: "noopener noreferrer", children: text }) : text, index < authors$1.length - 2 && jsx("span", { className: separator, children: ", " }), index < authors$1.length - 1 && jsx("span", { className: separator, children: " & " })] }, index);
  }) })] });
}
function parseAuthor(author) {
  const match = author.match(/\[(.+)\]\((.+)\)/);
  if (!match)
    return { text: author, url: void 0 };
  return {
    text: match[1],
    url: match[2]
  };
}
const posts = [];
var root$w = "vocs_BlogPosts";
var description = "vocs_BlogPosts_description";
var divider = "vocs_BlogPosts_divider";
var post = "vocs_BlogPosts_post";
var readMore = "vocs_BlogPosts_readMore";
var title$2 = "vocs_BlogPosts_title";
function BlogPosts() {
  return jsx("div", { className: root$w, children: posts.map((post$1, index) => jsxs(Fragment, { children: [jsx("div", { className: post, children: jsxs(RouterLink, { to: post$1.path, children: [jsx("h2", { className: title$2, children: post$1.title }), jsx(Authors, { authors: post$1.authors, date: post$1.date }), jsxs("p", { className: description, children: [post$1.description, " ", jsx("span", { className: readMore, children: "[→]" })] })] }) }), index < posts.length - 1 && jsx("hr", { className: divider })] }, index)) });
}
var columnsVar = "var(--vocs_Sponsors_columns)";
var heightVar = "var(--vocs_Sponsors_height)";
var root$v = "vocs_Sponsors";
var title$1 = "vocs_Sponsors_title";
var row = "vocs_Sponsors_row";
var column = "vocs_Sponsors_column";
var sponsor = "vocs_Sponsors_sponsor";
var image = "vocs_Sponsors_image";
function Sponsors() {
  const { sponsors } = useConfig();
  return jsx("div", { className: root$v, children: sponsors == null ? void 0 : sponsors.map((sponsorSet, i) => jsxs(Fragment, { children: [jsx("div", { className: title$1, children: sponsorSet.name }), sponsorSet.items.map((sponsorRow, i2) => {
    var _a;
    return jsx("div", { className: row, style: assignInlineVars({
      [columnsVar]: sponsorRow.length.toString(),
      [heightVar]: `${((_a = sponsorSet.height) == null ? void 0 : _a.toString()) ?? "40"}px`
    }), children: sponsorRow.map((sponsor$1, i3) => jsx(Link$1, { className: clsx$1(column, sponsor$1 ? sponsor : void 0), href: sponsor$1 == null ? void 0 : sponsor$1.link, hideExternalIcon: true, variant: "styleless", children: (sponsor$1 == null ? void 0 : sponsor$1.image) && jsx("img", { className: image, src: sponsor$1 == null ? void 0 : sponsor$1.image, alt: sponsor$1 == null ? void 0 : sponsor$1.name }) }, i3)) }, i2);
  })] }, i)) });
}
var iconUrl = "var(--vocs_AutolinkIcon_iconUrl)";
var root$u = "vocs_AutolinkIcon";
function AutolinkIcon(props) {
  const { basePath } = useConfig();
  const assetBasePath = basePath;
  return jsx("div", { ...props, className: clsx(props.className, root$u), style: assignInlineVars({
    [iconUrl]: `url(${assetBasePath}/.vocs/icons/link.svg)`
  }) });
}
var root$t = "vocs_Tabs";
var list = "vocs_Tabs_list";
var trigger = "vocs_Tabs_trigger";
var content$1 = "vocs_Tabs_content";
function Root$1(props) {
  return jsx(Tabs.Root, { ...props, className: clsx$1(props.className, root$t) });
}
function List$1(props) {
  return jsx(Tabs.List, { ...props, className: clsx$1(props.className, list) });
}
function Trigger(props) {
  return jsx(Tabs.Trigger, { ...props, className: clsx$1(props.className, trigger) });
}
function Content(props) {
  return jsx(Tabs.Content, { ...props, className: clsx$1(props.className, content$1) });
}
var root$s = "vocs_CodeGroup";
function CodeGroup({ children }) {
  if (!Array.isArray(children))
    return null;
  const tabs = children.map((child_) => {
    const child = child_.props["data-title"] ? child_ : child_.props.children;
    const { props } = child;
    const title2 = props["data-title"];
    const content2 = props.children;
    return { title: title2, content: content2 };
  });
  return jsxs(Root$1, { className: root$s, defaultValue: tabs[0].title, children: [jsx(List$1, { "aria-label": "Code group", children: tabs.map(({ title: title2 }, i) => jsx(Trigger, { value: title2 || i.toString(), children: title2 }, title2 || i.toString())) }), tabs.map(({ title: title2, content: content2 }, i) => {
    var _a, _b, _c, _d;
    const isShiki = (_d = (_c = (_b = (_a = content2.props) == null ? void 0 : _a.children) == null ? void 0 : _b.props) == null ? void 0 : _c.className) == null ? void 0 : _d.includes("shiki");
    return jsx(Content, { "data-shiki": isShiki, value: title2 || i.toString(), children: content2 }, title2 || i.toString());
  })] });
}
var root$r = "vocs_Div";
var root$q = "vocs_Step";
var title = "vocs_Step_title";
var content = "vocs_Step_content";
var root$p = "vocs_H2";
function H2(props) {
  return jsx(Heading, { ...props, className: clsx(props.className, root$p), level: 2 });
}
var root$o = "vocs_H3";
function H3(props) {
  return jsx(Heading, { ...props, className: clsx(props.className, root$o), level: 3 });
}
var root$n = "vocs_H4";
function H4(props) {
  return jsx(Heading, { ...props, className: clsx(props.className, root$n), level: 4 });
}
var root$m = "vocs_H5";
function H5(props) {
  return jsx(Heading, { ...props, className: clsx(props.className, root$m), level: 5 });
}
var root$l = "vocs_H6";
function H6(props) {
  return jsx(Heading, { ...props, className: clsx(props.className, root$l), level: 6 });
}
function Step({ children, className, title: title$12, titleLevel = 2 }) {
  const Element = (() => {
    if (titleLevel === 2)
      return H2;
    if (titleLevel === 3)
      return H3;
    if (titleLevel === 4)
      return H4;
    if (titleLevel === 5)
      return H5;
    if (titleLevel === 6)
      return H6;
    throw new Error("Invalid.");
  })();
  return jsxs("div", { className: clsx(className, root$q), children: [typeof title$12 === "string" ? jsx(Element, { className: title, children: title$12 }) : title$12, jsx("div", { className: content, children })] });
}
var root$k = "vocs_Steps";
function Steps$1({ children, className }) {
  return jsx("div", { className: clsx(className, root$k), children });
}
function Steps({ children }) {
  if (!Array.isArray(children))
    return null;
  return jsx(Steps$1, { children: children.map(({ props }, i) => {
    const [title$12, ...children2] = Array.isArray(props.children) ? props.children : [props.children];
    return jsx(Step, { title: cloneElement(title$12, { className: title }), children: children2 }, i);
  }) });
}
var root$j = "vocs_Subtitle";
function Subtitle({ children }) {
  return jsx("div", { className: root$j, children });
}
function Div(props) {
  const { layout } = useLayout();
  const className = clsx(props.className, root$r);
  if (props.className === "code-group")
    return jsx(CodeGroup, { ...props, className });
  if ("data-authors" in props)
    return jsx(Authors, {});
  if ("data-blog-posts" in props)
    return jsx(BlogPosts, {});
  if ("data-sponsors" in props)
    return jsx(Sponsors, {});
  if ("data-autolink-icon" in props && layout === "docs")
    return jsx(AutolinkIcon, { ...props, className });
  if ("data-vocs-steps" in props)
    return jsx(Steps, { ...props, className });
  if (props.role === "doc-subtitle")
    return jsx(Subtitle, { ...props });
  return jsx("div", { ...props, className });
}
var root$i = "vocs_Figcaption";
function Figcaption(props) {
  const className = clsx(props.className, root$i);
  return jsx("figcaption", { ...props, className });
}
var root$h = "vocs_Figure";
function Figure(props) {
  const className = clsx(props.className, root$h);
  return jsx("figure", { ...props, className });
}
var root$g = "vocs_Header";
function Header(props) {
  return jsx("header", { ...props, className: clsx(props.className, root$g) });
}
var root$f = "vocs_HorizontalRule";
function HorizontalRule(props) {
  return jsx("hr", { ...props, className: clsx(props.className, root$f) });
}
var root$e = "vocs_List";
var ordered = "vocs_List_ordered";
var unordered = "vocs_List_unordered";
function List({ ordered: ordered$1, ...props }) {
  const Element = ordered$1 ? "ol" : "ul";
  return jsx(Element, { ...props, className: clsx(props.className, root$e, ordered$1 ? ordered : unordered) });
}
var root$d = "vocs_ListItem";
function ListItem(props) {
  return jsx("li", { ...props, className: clsx(props.className, root$d) });
}
function useCopyCode() {
  const ref = useRef(null);
  const [copied2, setCopied] = useState(false);
  useEffect(() => {
    if (!copied2)
      return;
    const timeout = setTimeout(() => setCopied(false), 1e3);
    return () => clearTimeout(timeout);
  }, [copied2]);
  function copy() {
    var _a;
    setCopied(true);
    const node = (_a = ref.current) == null ? void 0 : _a.cloneNode(true);
    const nodesToRemove = node == null ? void 0 : node.querySelectorAll("button,.line.diff.remove,.twoslash-popup-info-hover,.twoslash-popup-info,.twoslash-meta-line,.twoslash-tag-line");
    for (const node2 of nodesToRemove ?? [])
      node2.remove();
    navigator.clipboard.writeText(node == null ? void 0 : node.textContent);
  }
  return {
    copied: copied2,
    copy,
    ref
  };
}
var root$c = "vocs_CopyButton";
var copied = "vocs_CopyButton_copied";
function Checkmark() {
  return jsxs("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 68 67", children: [jsx("title", { children: "Checkmark" }), jsx("path", { fill: "currentColor", d: "M26.175 66.121c1.904 0 3.418-.83 4.492-2.49L66.263 7.332c.83-1.27 1.123-2.295 1.123-3.32 0-2.393-1.563-4.004-4.004-4.004-1.758 0-2.734.586-3.809 2.295L25.98 56.209 8.304 32.381c-1.123-1.514-2.198-2.149-3.809-2.149-2.441 0-4.2 1.71-4.2 4.15 0 1.026.44 2.15 1.27 3.224l19.971 25.927c1.367 1.758 2.734 2.588 4.639 2.588Z" })] });
}
function Copy() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Copy" }), jsx("path", { d: "M5 2V1H10V2H5ZM4.75 0C4.33579 0 4 0.335786 4 0.75V1H3.5C2.67157 1 2 1.67157 2 2.5V12.5C2 13.3284 2.67157 14 3.5 14H7V13H3.5C3.22386 13 3 12.7761 3 12.5V2.5C3 2.22386 3.22386 2 3.5 2H4V2.25C4 2.66421 4.33579 3 4.75 3H10.25C10.6642 3 11 2.66421 11 2.25V2H11.5C11.7761 2 12 2.22386 12 2.5V7H13V2.5C13 1.67157 12.3284 1 11.5 1H11V0.75C11 0.335786 10.6642 0 10.25 0H4.75ZM9 8.5C9 8.77614 8.77614 9 8.5 9C8.22386 9 8 8.77614 8 8.5C8 8.22386 8.22386 8 8.5 8C8.77614 8 9 8.22386 9 8.5ZM10.5 9C10.7761 9 11 8.77614 11 8.5C11 8.22386 10.7761 8 10.5 8C10.2239 8 10 8.22386 10 8.5C10 8.77614 10.2239 9 10.5 9ZM13 8.5C13 8.77614 12.7761 9 12.5 9C12.2239 9 12 8.77614 12 8.5C12 8.22386 12.2239 8 12.5 8C12.7761 8 13 8.22386 13 8.5ZM14.5 9C14.7761 9 15 8.77614 15 8.5C15 8.22386 14.7761 8 14.5 8C14.2239 8 14 8.22386 14 8.5C14 8.77614 14.2239 9 14.5 9ZM15 10.5C15 10.7761 14.7761 11 14.5 11C14.2239 11 14 10.7761 14 10.5C14 10.2239 14.2239 10 14.5 10C14.7761 10 15 10.2239 15 10.5ZM14.5 13C14.7761 13 15 12.7761 15 12.5C15 12.2239 14.7761 12 14.5 12C14.2239 12 14 12.2239 14 12.5C14 12.7761 14.2239 13 14.5 13ZM14.5 15C14.7761 15 15 14.7761 15 14.5C15 14.2239 14.7761 14 14.5 14C14.2239 14 14 14.2239 14 14.5C14 14.7761 14.2239 15 14.5 15ZM8.5 11C8.77614 11 9 10.7761 9 10.5C9 10.2239 8.77614 10 8.5 10C8.22386 10 8 10.2239 8 10.5C8 10.7761 8.22386 11 8.5 11ZM9 12.5C9 12.7761 8.77614 13 8.5 13C8.22386 13 8 12.7761 8 12.5C8 12.2239 8.22386 12 8.5 12C8.77614 12 9 12.2239 9 12.5ZM8.5 15C8.77614 15 9 14.7761 9 14.5C9 14.2239 8.77614 14 8.5 14C8.22386 14 8 14.2239 8 14.5C8 14.7761 8.22386 15 8.5 15ZM11 14.5C11 14.7761 10.7761 15 10.5 15C10.2239 15 10 14.7761 10 14.5C10 14.2239 10.2239 14 10.5 14C10.7761 14 11 14.2239 11 14.5ZM12.5 15C12.7761 15 13 14.7761 13 14.5C13 14.2239 12.7761 14 12.5 14C12.2239 14 12 14.2239 12 14.5C12 14.7761 12.2239 15 12.5 15Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function CopyButton({ copy, copied: copied$1 }) {
  return jsx("button", { className: root$c, "data-copied": copied$1, onClick: copy, type: "button", children: copied$1 ? jsx(Icon, { label: "Copied", size: "14px", className: copied, icon: Checkmark }) : jsx(Icon, { label: "Copy", size: "18px", icon: Copy }) });
}
var root$b = "vocs_CodeBlock";
function CodeBlock(props) {
  return jsx("div", { ...props, className: clsx(props.className, root$b) });
}
function File() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "File" }), jsx("path", { d: "M4.2 1H4.17741H4.1774C3.86936 0.999988 3.60368 0.999978 3.38609 1.02067C3.15576 1.04257 2.92825 1.09113 2.71625 1.22104C2.51442 1.34472 2.34473 1.51442 2.22104 1.71625C2.09113 1.92825 2.04257 2.15576 2.02067 2.38609C1.99998 2.60367 1.99999 2.86935 2 3.17738V3.1774V3.2V11.8V11.8226V11.8226C1.99999 12.1307 1.99998 12.3963 2.02067 12.6139C2.04257 12.8442 2.09113 13.0717 2.22104 13.2837C2.34473 13.4856 2.51442 13.6553 2.71625 13.779C2.92825 13.9089 3.15576 13.9574 3.38609 13.9793C3.60368 14 3.86937 14 4.17741 14H4.2H10.8H10.8226C11.1306 14 11.3963 14 11.6139 13.9793C11.8442 13.9574 12.0717 13.9089 12.2837 13.779C12.4856 13.6553 12.6553 13.4856 12.779 13.2837C12.9089 13.0717 12.9574 12.8442 12.9793 12.6139C13 12.3963 13 12.1306 13 11.8226V11.8V3.2V3.17741C13 2.86936 13 2.60368 12.9793 2.38609C12.9574 2.15576 12.9089 1.92825 12.779 1.71625C12.6553 1.51442 12.4856 1.34472 12.2837 1.22104C12.0717 1.09113 11.8442 1.04257 11.6139 1.02067C11.3963 0.999978 11.1306 0.999988 10.8226 1H10.8H4.2ZM3.23875 2.07368C3.26722 2.05623 3.32362 2.03112 3.48075 2.01618C3.64532 2.00053 3.86298 2 4.2 2H10.8C11.137 2 11.3547 2.00053 11.5193 2.01618C11.6764 2.03112 11.7328 2.05623 11.7613 2.07368C11.8285 2.11491 11.8851 2.17147 11.9263 2.23875C11.9438 2.26722 11.9689 2.32362 11.9838 2.48075C11.9995 2.64532 12 2.86298 12 3.2V11.8C12 12.137 11.9995 12.3547 11.9838 12.5193C11.9689 12.6764 11.9438 12.7328 11.9263 12.7613C11.8851 12.8285 11.8285 12.8851 11.7613 12.9263C11.7328 12.9438 11.6764 12.9689 11.5193 12.9838C11.3547 12.9995 11.137 13 10.8 13H4.2C3.86298 13 3.64532 12.9995 3.48075 12.9838C3.32362 12.9689 3.26722 12.9438 3.23875 12.9263C3.17147 12.8851 3.11491 12.8285 3.07368 12.7613C3.05624 12.7328 3.03112 12.6764 3.01618 12.5193C3.00053 12.3547 3 12.137 3 11.8V3.2C3 2.86298 3.00053 2.64532 3.01618 2.48075C3.03112 2.32362 3.05624 2.26722 3.07368 2.23875C3.11491 2.17147 3.17147 2.11491 3.23875 2.07368ZM5 10C4.72386 10 4.5 10.2239 4.5 10.5C4.5 10.7761 4.72386 11 5 11H8C8.27614 11 8.5 10.7761 8.5 10.5C8.5 10.2239 8.27614 10 8 10H5ZM4.5 7.5C4.5 7.22386 4.72386 7 5 7H10C10.2761 7 10.5 7.22386 10.5 7.5C10.5 7.77614 10.2761 8 10 8H5C4.72386 8 4.5 7.77614 4.5 7.5ZM5 4C4.72386 4 4.5 4.22386 4.5 4.5C4.5 4.77614 4.72386 5 5 5H10C10.2761 5 10.5 4.77614 10.5 4.5C10.5 4.22386 10.2761 4 10 4H5Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function Terminal() {
  return jsxs("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 79 95", fill: "none", children: [jsx("title", { children: "Terminal" }), jsx("path", { fill: "currentColor", d: "M38.281 34.033c0-1.074-.39-2.05-1.22-2.88L6.885 1.171C6.152.39 5.175 0 4.053 0 1.758 0 0 1.709 0 4.004c0 1.074.488 2.1 1.172 2.88l27.295 27.15L1.172 61.181C.488 61.962 0 62.939 0 64.062c0 2.295 1.758 4.004 4.053 4.004 1.123 0 2.1-.39 2.832-1.172l30.176-29.98c.83-.83 1.22-1.807 1.22-2.88Z" }), jsx("path", { stroke: "currentColor", strokeLinecap: "round", strokeWidth: "8px", d: "M36 75h55" })] });
}
var root$a = "vocs_CodeTitle";
function CodeTitle({ children, className, language, ...props }) {
  return jsxs("div", { ...props, className: clsx(className, root$a), children: [language === "bash" ? jsx(Icon, { label: "Terminal", size: "14px", icon: Terminal, style: { marginTop: 3 } }) : children.match(/\.(.*)$/) ? jsx(Icon, { label: "File", size: "14px", icon: File, style: { marginTop: 1 } }) : null, children] });
}
var root$9 = "vocs_Pre";
var wrapper = "vocs_Pre_wrapper";
function Pre({ children, className, ...props }) {
  const { copied: copied2, copy, ref } = useCopyCode();
  function recurseChildren(children2) {
    if (!children2)
      return children2;
    if (typeof children2 !== "object")
      return children2;
    if ("props" in children2)
      return {
        ...children2,
        props: {
          ...children2.props,
          children: Array.isArray(children2.props.children) ? children2.props.children.map(recurseChildren) : recurseChildren(children2.props.children)
        }
      };
    return children2;
  }
  const children_ = useMemo(() => recurseChildren(children), [children]);
  const wrap = (children2) => {
    if (className == null ? void 0 : className.includes("shiki"))
      return jsxs(CodeBlock, { children: [props["data-title"] && jsx(CodeTitle, { language: props["data-lang"], children: props["data-title"] }), children2] });
    return children2;
  };
  return wrap(jsx("div", { className: clsx(wrapper), children: jsxs("pre", { ref, ...props, className: clsx(className, root$9), children: [jsx(CopyButton, { copied: copied2, copy }), children_] }) }));
}
var root$8 = "vocs_Footnotes";
function Footnotes(props) {
  return jsx("section", { ...props, className: clsx(props.className, root$8) });
}
var root$7 = "vocs_Section";
function Section(props) {
  if ("data-footnotes" in props)
    return jsx(Footnotes, { ...props, className: clsx(props.className, root$7) });
  return jsx("section", { ...props, className: clsx(props.className, root$7) });
}
var root$6 = "vocs_Span";
function TwoslashPopover({ children, ...props }) {
  const [popover, target] = children;
  const arrowRef = useRef(null);
  const [isOpen, setIsOpen] = useState(false);
  const { context, refs, floatingStyles } = useFloating({
    middleware: [
      arrow({
        element: arrowRef
      }),
      offset(8),
      shift()
    ],
    open: isOpen,
    onOpenChange: setIsOpen,
    placement: "bottom-start"
  });
  const hover = useHover(context, { handleClose: safePolygon() });
  const { getReferenceProps, getFloatingProps } = useInteractions([hover]);
  const targetChildren = target.props.children;
  const popoverChildren = popover.props.children;
  return jsxs("span", { ...props, children: [jsx("span", { className: "twoslash-target", ref: refs.setReference, ...getReferenceProps(), children: targetChildren }), isOpen && jsxs("div", { className: "twoslash-popup-info-hover", ref: refs.setFloating, style: floatingStyles, ...getFloatingProps(), children: [jsx(FloatingArrow, { ref: arrowRef, context, fill: primitiveColorVars.background5, height: 3, stroke: primitiveColorVars.border2, strokeWidth: 1, width: 7 }), jsx("div", { className: "twoslash-popup-scroll-container", children: popoverChildren })] })] });
}
function Span(props) {
  var _a;
  const className = clsx(props.className, root$6);
  if ((_a = props.className) == null ? void 0 : _a.includes("twoslash-hover"))
    return jsx(TwoslashPopover, { ...props, className });
  return jsx("span", { ...props, className: clsx(props.className, root$6) });
}
var root$5 = "vocs_Strong";
function Strong(props) {
  return jsx("strong", { ...props, className: clsx(props.className, root$5) });
}
var root$4 = "vocs_Summary";
function Summary(props) {
  return jsx("summary", { ...props, className: clsx(props.className, root$4) });
}
var root$3 = "vocs_Table";
function Table(props) {
  return jsx("table", { ...props, className: clsx(props.className, root$3) });
}
var root$2 = "vocs_TableCell";
function TableCell(props) {
  return jsx("td", { ...props, className: clsx(props.className, root$2) });
}
var root$1 = "vocs_TableHeader";
function TableHeader(props) {
  return jsx("th", { ...props, className: clsx(props.className, root$1) });
}
var root = "vocs_TableRow";
function TableRow(props) {
  return jsx("tr", { ...props, className: clsx(props.className, root) });
}
const components = {
  a: Anchor,
  aside: Aside,
  blockquote: Blockquote,
  code: Code,
  details: Details,
  div: Div,
  pre: Pre,
  header: Header,
  figcaption: Figcaption,
  figure: Figure,
  h1: H1,
  h2: H2,
  h3: H3,
  h4: H4,
  h5: H5,
  h6: H6,
  hr: HorizontalRule,
  kd: Kbd,
  li: ListItem,
  ol: (props) => jsx(List, { ordered: true, ...props }),
  p: Paragraph,
  section: Section,
  span: Span,
  strong: Strong,
  summary: Summary,
  table: Table,
  td: TableCell,
  th: TableHeader,
  tr: TableRow,
  ul: (props) => jsx(List, { ordered: false, ...props })
};
function useOgImageUrl() {
  const { pathname } = useLocation();
  const config2 = useConfig();
  const { ogImageUrl } = config2;
  if (!ogImageUrl)
    return void 0;
  if (typeof ogImageUrl === "string")
    return ogImageUrl;
  const pathKey = useMemo(() => {
    const keys = Object.keys(ogImageUrl).filter((key) => pathname.startsWith(key));
    return keys[keys.length - 1];
  }, [ogImageUrl, pathname]);
  if (!pathKey)
    return void 0;
  return ogImageUrl[pathKey];
}
function Root(props) {
  const { children, filePath, frontmatter, lastUpdatedAt, path } = props;
  const { pathname } = useLocation();
  const previousPathRef = useRef(void 0);
  useEffect(() => {
    previousPathRef.current = pathname;
  });
  return jsxs(Fragment$1, { children: [jsx(Head, { frontmatter }), typeof window !== "undefined" && jsx(ScrollRestoration, {}), jsx(MDXProvider, { components, children: jsx(Layout, { frontmatter, path, children: jsx(PageDataContext.Provider, { value: { filePath, frontmatter, lastUpdatedAt, previousPath: previousPathRef.current }, children }) }) })] });
}
function Head({ frontmatter }) {
  var _a, _b, _c, _d, _e, _f;
  const config2 = useConfig();
  const ogImageUrl = useOgImageUrl();
  const { baseUrl, font, iconUrl: iconUrl2, logoUrl } = config2;
  const description2 = (frontmatter == null ? void 0 : frontmatter.description) ?? config2.description;
  const title2 = (frontmatter == null ? void 0 : frontmatter.title) ?? config2.title;
  const titleTemplate = (() => {
    if (!config2.title)
      return void 0;
    if (title2.includes(config2.title))
      return void 0;
    return config2.titleTemplate;
  })();
  const isLocalhost = typeof window !== "undefined" && window.location.hostname === "localhost";
  const fullTitle = titleTemplate ? titleTemplate.replace("%s", title2) : title2;
  return jsxs(Fragment$1, { children: [fullTitle && jsx("title", { children: fullTitle }), baseUrl && true && !isLocalhost && jsx("base", { href: baseUrl }), description2 !== "undefined" && jsx("meta", { name: "description", content: description2 }), iconUrl2 && typeof iconUrl2 === "string" && jsx("link", { rel: "icon", href: iconUrl2, type: getIconType(iconUrl2) }), iconUrl2 && typeof iconUrl2 !== "string" && jsx("link", { rel: "icon", href: iconUrl2.light, type: getIconType(iconUrl2.light) }), iconUrl2 && typeof iconUrl2 !== "string" && jsx("link", { rel: "icon", href: iconUrl2.dark, type: getIconType(iconUrl2.dark), media: "(prefers-color-scheme: dark)" }), jsx("meta", { property: "og:type", content: "website" }), jsx("meta", { property: "og:title", content: title2 || config2.title }), baseUrl && jsx("meta", { property: "og:url", content: baseUrl }), description2 !== "undefined" && jsx("meta", { property: "og:description", content: description2 }), ogImageUrl && jsx("meta", { property: "og:image", content: ogImageUrl.replace("%logo", `${baseUrl ? baseUrl : ""}${typeof logoUrl === "string" ? logoUrl : (logoUrl == null ? void 0 : logoUrl.dark) || ""}`).replace("%title", title2 || "").replace("%description", (description2 !== "undefined" ? description2 : "") || "") }), (((_a = font == null ? void 0 : font.default) == null ? void 0 : _a.google) || ((_b = font == null ? void 0 : font.mono) == null ? void 0 : _b.google)) && jsx("link", { rel: "preconnect", href: "https://fonts.googleapis.com" }), (((_c = font == null ? void 0 : font.default) == null ? void 0 : _c.google) || ((_d = font == null ? void 0 : font.mono) == null ? void 0 : _d.google)) && jsx("link", { rel: "preconnect", href: "https://fonts.gstatic.com", crossOrigin: "" }), ((_e = font == null ? void 0 : font.default) == null ? void 0 : _e.google) && jsx("link", { href: `https://fonts.googleapis.com/css2?family=${font.default.google}:wght@300;400;500&display=swap`, rel: "stylesheet" }), ((_f = font == null ? void 0 : font.mono) == null ? void 0 : _f.google) && jsx("link", { href: `https://fonts.googleapis.com/css2?family=${font.mono.google}:wght@300;400;500&display=swap`, rel: "stylesheet" }), jsx("meta", { name: "twitter:card", content: "summary_large_image" }), ogImageUrl && jsx("meta", { property: "twitter:image", content: ogImageUrl.replace("%logo", `${baseUrl ? baseUrl : ""}${typeof logoUrl === "string" ? logoUrl : (logoUrl == null ? void 0 : logoUrl.dark) || ""}`).replace("%title", title2 ? encodeURIComponent(title2) : "").replace("%description", description2 ? encodeURIComponent(description2) : "") })] });
}
function getIconType(iconUrl2) {
  if (iconUrl2.endsWith(".svg"))
    return "image/svg+xml";
  if (iconUrl2.endsWith(".png"))
    return "image/png";
  if (iconUrl2.endsWith(".jpg"))
    return "image/jpeg";
  if (iconUrl2.endsWith(".ico"))
    return "image/x-icon";
  if (iconUrl2.endsWith(".webp"))
    return "image/webp";
  return void 0;
}
const notFoundRoute = (() => {
  const virtualRoute = routes$1.find(({ path }) => path === "*");
  if (virtualRoute)
    return {
      path: virtualRoute.path,
      lazy: async () => {
        const { frontmatter, ...route } = await virtualRoute.lazy();
        return {
          ...route,
          element: jsx(Root, { frontmatter, path: virtualRoute.path, children: jsx(DocsLayout, { children: jsx(route.default, {}) }) })
        };
      }
    };
  return {
    path: "*",
    // 404
    lazy: void 0,
    element: jsx(Root, { frontmatter: { layout: "minimal" }, path: "*", children: jsx(DocsLayout, { children: jsx(NotFound, {}) }) })
  };
})();
const routes = [
  ...routes$1.filter(({ path }) => path !== "*").map((route_virtual) => ({
    path: route_virtual.path,
    lazy: async () => {
      const { frontmatter, ...route } = await route_virtual.lazy();
      return {
        ...route,
        element: jsx(Root, { filePath: route_virtual.filePath, frontmatter, lastUpdatedAt: route_virtual.lastUpdatedAt, path: route_virtual.path, children: jsx(DocsLayout, { children: jsx(route.default, {}) }) })
      };
    }
  })),
  notFoundRoute
];
function createFetchRequest(req) {
  const origin = `${req.protocol}://${req.headers.host}`;
  const url = new URL(req.originalUrl || req.url, origin);
  const controller = new AbortController();
  req.on("close", () => controller.abort());
  const headers = new Headers();
  for (const [key, values] of Object.entries(req.headers)) {
    if (values) {
      if (Array.isArray(values))
        for (const value of values)
          headers.append(key, value);
      else
        headers.set(key, values);
    }
  }
  const init = {
    method: req.method,
    headers,
    signal: controller.signal
  };
  if (req.method !== "GET" && req.method !== "HEAD")
    init.body = req.body;
  return new Request(url.href, init);
}
async function prerender(location) {
  const unwrappedRoutes = (await Promise.all(routes.map(async (route) => {
    const location_ = location === "/" ? "/" : location.replace(/\/$/, "");
    const path = route.path.replace(/\.html$/, "");
    if (path !== location_ && path !== "*")
      return null;
    const element = route.lazy ? (await route.lazy()).element : route.element;
    return {
      path: route.path,
      element
    };
  }))).filter(Boolean);
  const { config: config2 } = await resolveVocsConfig();
  const { basePath } = config2;
  return jsx(ConfigProvider, { config: config2, children: jsx(StaticRouter, { location, basename: basePath, children: jsx(Routes, { children: unwrappedRoutes.map((route) => jsx(Route, { path: route.path, element: route.element }, route.path)) }) }) });
}
async function render(req) {
  const { config: config2 } = await resolveVocsConfig();
  const { basePath } = config2;
  const { query, dataRoutes } = createStaticHandler(routes, { basename: basePath });
  const fetchRequest = createFetchRequest(req);
  const context = await query(fetchRequest);
  if (context instanceof Response)
    throw context;
  const router = createStaticRouter(dataRoutes, context);
  return jsx(ConfigProvider, { config: config2, children: jsx(StaticRouterProvider, { router, context }) });
}
export {
  prerender,
  render
};
