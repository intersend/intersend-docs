import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import { useMDXComponents } from "vocs/mdx-react";
const frontmatter = {
  "title": "Markdown Syntax",
  "description": "Text title and styling in standard markdown",
  "layout": "docs",
  "showSidebar": true
};
function _createMdxContent(props) {
  const _components = {
    a: "a",
    blockquote: "blockquote",
    code: "code",
    del: "del",
    div: "div",
    em: "em",
    h1: "h1",
    h2: "h2",
    h3: "h3",
    header: "header",
    p: "p",
    pre: "pre",
    span: "span",
    strong: "strong",
    table: "table",
    tbody: "tbody",
    td: "td",
    th: "th",
    thead: "thead",
    tr: "tr",
    ...useMDXComponents(),
    ...props.components
  };
  return jsxs(Fragment, {
    children: [jsx(_components.header, {
      children: jsxs(_components.h1, {
        id: "markdown-syntax",
        children: ["Markdown Syntax", jsx(_components.a, {
          "aria-hidden": "true",
          tabIndex: "-1",
          href: "#markdown-syntax",
          children: jsx(_components.div, {
            "data-autolink-icon": true
          })
        })]
      })
    }), "\n", jsxs(_components.h2, {
      id: "titles",
      children: ["Titles", jsx(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#titles",
        children: jsx(_components.div, {
          "data-autolink-icon": true
        })
      })]
    }), "\n", jsx(_components.p, {
      children: "Best used for section headers."
    }), "\n", jsx(Fragment, {
      children: jsx(_components.pre, {
        className: "shiki shiki-themes github-light github-dark-dimmed",
        style: {
          backgroundColor: "#fff",
          "--shiki-dark-bg": "#22272e",
          color: "#24292e",
          "--shiki-dark": "#adbac7"
        },
        tabIndex: "0",
        children: jsx(_components.code, {
          children: jsx(_components.span, {
            className: "line",
            children: jsx(_components.span, {
              style: {
                color: "#005CC5",
                fontWeight: "bold",
                "--shiki-dark": "#6CB6FF",
                "--shiki-dark-font-weight": "bold"
              },
              children: "## Titles"
            })
          })
        })
      })
    }), "\n", jsxs(_components.h3, {
      id: "subtitles",
      children: ["Subtitles", jsx(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#subtitles",
        children: jsx(_components.div, {
          "data-autolink-icon": true
        })
      })]
    }), "\n", jsx(_components.p, {
      children: "Best used for subsection headers."
    }), "\n", jsx(Fragment, {
      children: jsx(_components.pre, {
        className: "shiki shiki-themes github-light github-dark-dimmed",
        style: {
          backgroundColor: "#fff",
          "--shiki-dark-bg": "#22272e",
          color: "#24292e",
          "--shiki-dark": "#adbac7"
        },
        tabIndex: "0",
        children: jsx(_components.code, {
          children: jsx(_components.span, {
            className: "line",
            children: jsx(_components.span, {
              style: {
                color: "#005CC5",
                fontWeight: "bold",
                "--shiki-dark": "#6CB6FF",
                "--shiki-dark-font-weight": "bold"
              },
              children: "### Subtitles"
            })
          })
        })
      })
    }), "\n", jsxs(_components.blockquote, {
      children: ["\n", jsxs(_components.p, {
        children: [jsx(_components.strong, {
          children: "Tip:"
        }), " Each ", jsx(_components.strong, {
          children: "title"
        }), " and ", jsx(_components.strong, {
          children: "subtitle"
        }), " creates an anchor and also shows up on the table of contents on the right."]
      }), "\n"]
    }), "\n", jsxs(_components.h2, {
      id: "text-formatting",
      children: ["Text Formatting", jsx(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#text-formatting",
        children: jsx(_components.div, {
          "data-autolink-icon": true
        })
      })]
    }), "\n", jsxs(_components.p, {
      children: ["We support most markdown formatting. Simply add ", jsx(_components.code, {
        children: "**"
      }), ", ", jsx(_components.code, {
        children: "_"
      }), ", or ", jsx(_components.code, {
        children: "~"
      }), " around text to format it."]
    }), "\n", jsxs(_components.table, {
      children: [jsx(_components.thead, {
        children: jsxs(_components.tr, {
          children: [jsx(_components.th, {
            children: "Style"
          }), jsx(_components.th, {
            children: "How to write it"
          }), jsx(_components.th, {
            children: "Result"
          })]
        })
      }), jsxs(_components.tbody, {
        children: [jsxs(_components.tr, {
          children: [jsx(_components.td, {
            children: "Bold"
          }), jsx(_components.td, {
            children: jsx(_components.code, {
              children: "**bold**"
            })
          }), jsx(_components.td, {
            children: jsx(_components.strong, {
              children: "bold"
            })
          })]
        }), jsxs(_components.tr, {
          children: [jsx(_components.td, {
            children: "Italic"
          }), jsx(_components.td, {
            children: jsx(_components.code, {
              children: "_italic_"
            })
          }), jsx(_components.td, {
            children: jsx(_components.em, {
              children: "italic"
            })
          })]
        }), jsxs(_components.tr, {
          children: [jsx(_components.td, {
            children: "Strikethrough"
          }), jsx(_components.td, {
            children: jsx(_components.code, {
              children: "~strikethrough~"
            })
          }), jsx(_components.td, {
            children: jsx(_components.del, {
              children: "strikethrough"
            })
          })]
        })]
      })]
    }), "\n", jsxs(_components.p, {
      children: ["You can combine these. For example, write ", jsx(_components.code, {
        children: "**_bold and italic_**"
      }), " to get ", jsx(_components.strong, {
        children: jsx(_components.em, {
          children: "bold and italic"
        })
      }), " text."]
    }), "\n", jsxs(_components.p, {
      children: ["You need to use HTML to write superscript and subscript text. That is, add ", jsx(_components.code, {
        children: "<sup>"
      }), " or ", jsx(_components.code, {
        children: "<sub>"
      }), " around your text."]
    }), "\n", jsxs(_components.table, {
      children: [jsx(_components.thead, {
        children: jsxs(_components.tr, {
          children: [jsx(_components.th, {
            children: "Text Size"
          }), jsx(_components.th, {
            children: "How to write it"
          }), jsx(_components.th, {
            children: "Result"
          })]
        })
      }), jsxs(_components.tbody, {
        children: [jsxs(_components.tr, {
          children: [jsx(_components.td, {
            children: "Superscript"
          }), jsx(_components.td, {
            children: jsx(_components.code, {
              children: "<sup>superscript</sup>"
            })
          }), jsx(_components.td, {
            children: jsx("sup", {
              children: "superscript"
            })
          })]
        }), jsxs(_components.tr, {
          children: [jsx(_components.td, {
            children: "Subscript"
          }), jsx(_components.td, {
            children: jsx(_components.code, {
              children: "<sub>subscript</sub>"
            })
          }), jsx(_components.td, {
            children: jsx("sub", {
              children: "subscript"
            })
          })]
        })]
      })]
    }), "\n", jsxs(_components.h2, {
      id: "linking-to-pages",
      children: ["Linking to Pages", jsx(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#linking-to-pages",
        children: jsx(_components.div, {
          "data-autolink-icon": true
        })
      })]
    }), "\n", jsxs(_components.p, {
      children: ["You can add a link by wrapping text in ", jsx(_components.code, {
        children: "[]()"
      }), ". You would write ", jsx(_components.code, {
        children: "[link to google](https://google.com)"
      }), " to ", jsx(_components.a, {
        href: "https://google.com",
        children: "link to google"
      }), "."]
    }), "\n", jsxs(_components.p, {
      children: ["Links to pages in your docs need to be root-relative. Basically, you should include the entire folder path. For example, ", jsx(_components.code, {
        children: "[link to code examples](/essentials/code)"
      }), ' links to the page "Code Examples" in our essentials section.']
    }), "\n", jsxs(_components.p, {
      children: ["Relative links like ", jsx(_components.code, {
        children: "[link to text](../text)"
      }), " will open slower because they cannot be optimized as easily."]
    }), "\n", jsxs(_components.h2, {
      id: "blockquotes",
      children: ["Blockquotes", jsx(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#blockquotes",
        children: jsx(_components.div, {
          "data-autolink-icon": true
        })
      })]
    }), "\n", jsxs(_components.h3, {
      id: "singleline",
      children: ["Singleline", jsx(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#singleline",
        children: jsx(_components.div, {
          "data-autolink-icon": true
        })
      })]
    }), "\n", jsxs(_components.p, {
      children: ["To create a blockquote, add a ", jsx(_components.code, {
        children: ">"
      }), " in front of a paragraph."]
    }), "\n", jsxs(_components.blockquote, {
      children: ["\n", jsx(_components.p, {
        children: "Dorothy followed her through many of the beautiful rooms in her castle."
      }), "\n"]
    }), "\n", jsx(Fragment, {
      children: jsx(_components.pre, {
        className: "shiki shiki-themes github-light github-dark-dimmed",
        style: {
          backgroundColor: "#fff",
          "--shiki-dark-bg": "#22272e",
          color: "#24292e",
          "--shiki-dark": "#adbac7"
        },
        tabIndex: "0",
        children: jsx(_components.code, {
          children: jsx(_components.span, {
            className: "line",
            children: jsx(_components.span, {
              style: {
                color: "#22863A",
                "--shiki-dark": "#8DDB8C"
              },
              children: "> Dorothy followed her through many of the beautiful rooms in her castle."
            })
          })
        })
      })
    }), "\n", jsxs(_components.h3, {
      id: "multiline",
      children: ["Multiline", jsx(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#multiline",
        children: jsx(_components.div, {
          "data-autolink-icon": true
        })
      })]
    }), "\n", jsxs(_components.blockquote, {
      children: ["\n", jsx(_components.p, {
        children: "Dorothy followed her through many of the beautiful rooms in her castle."
      }), "\n", jsx(_components.p, {
        children: "The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood."
      }), "\n"]
    }), "\n", jsx(Fragment, {
      children: jsx(_components.pre, {
        className: "shiki shiki-themes github-light github-dark-dimmed",
        style: {
          backgroundColor: "#fff",
          "--shiki-dark-bg": "#22272e",
          color: "#24292e",
          "--shiki-dark": "#adbac7"
        },
        tabIndex: "0",
        children: jsxs(_components.code, {
          children: [jsx(_components.span, {
            className: "line",
            children: jsx(_components.span, {
              style: {
                color: "#22863A",
                "--shiki-dark": "#8DDB8C"
              },
              children: "> Dorothy followed her through many of the beautiful rooms in her castle."
            })
          }), "\n", jsx(_components.span, {
            className: "line",
            children: jsx(_components.span, {
              style: {
                color: "#22863A",
                "--shiki-dark": "#8DDB8C"
              },
              children: ">"
            })
          }), "\n", jsx(_components.span, {
            className: "line",
            children: jsx(_components.span, {
              style: {
                color: "#22863A",
                "--shiki-dark": "#8DDB8C"
              },
              children: "> The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood."
            })
          })]
        })
      })
    }), "\n", jsxs(_components.h2, {
      id: "math-expressions",
      children: ["Math Expressions", jsx(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#math-expressions",
        children: jsx(_components.div, {
          "data-autolink-icon": true
        })
      })]
    }), "\n", jsx(_components.p, {
      children: "You can include mathematical expressions using standard Markdown math syntax with dollar signs:"
    }), "\n", jsx(_components.p, {
      children: "Inline math: $E = mc^2$"
    }), "\n", jsx(Fragment, {
      children: jsx(_components.pre, {
        className: "shiki shiki-themes github-light github-dark-dimmed",
        style: {
          backgroundColor: "#fff",
          "--shiki-dark-bg": "#22272e",
          color: "#24292e",
          "--shiki-dark": "#adbac7"
        },
        tabIndex: "0",
        children: jsx(_components.code, {
          children: jsx(_components.span, {
            className: "line",
            children: jsx(_components.span, {
              style: {
                color: "#24292E",
                "--shiki-dark": "#ADBAC7"
              },
              children: "Inline math: $E = mc^2$"
            })
          })
        })
      })
    }), "\n", jsx(_components.p, {
      children: "Block math:"
    }), "\n", jsx(_components.p, {
      children: "$$\nE = mc^2\n$$"
    }), "\n", jsx(Fragment, {
      children: jsx(_components.pre, {
        className: "shiki shiki-themes github-light github-dark-dimmed",
        style: {
          backgroundColor: "#fff",
          "--shiki-dark-bg": "#22272e",
          color: "#24292e",
          "--shiki-dark": "#adbac7"
        },
        tabIndex: "0",
        children: jsxs(_components.code, {
          children: [jsx(_components.span, {
            className: "line",
            children: jsx(_components.span, {
              style: {
                color: "#24292E",
                "--shiki-dark": "#ADBAC7"
              },
              children: "$$"
            })
          }), "\n", jsx(_components.span, {
            className: "line",
            children: jsx(_components.span, {
              style: {
                color: "#24292E",
                "--shiki-dark": "#ADBAC7"
              },
              children: "E = mc^2"
            })
          }), "\n", jsx(_components.span, {
            className: "line",
            children: jsx(_components.span, {
              style: {
                color: "#24292E",
                "--shiki-dark": "#ADBAC7"
              },
              children: "$$"
            })
          })]
        })
      })
    })]
  });
}
function MDXContent(props = {}) {
  const { wrapper: MDXLayout } = {
    ...useMDXComponents(),
    ...props.components
  };
  return MDXLayout ? jsx(MDXLayout, {
    ...props,
    children: jsx(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
export {
  MDXContent as default,
  frontmatter
};
